<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Numerics.NET.Tensors</name>
  </assembly>
  <members>
    <member name="T:Numerics.NET.Axes">
      <summary>
            Represents a collection of zero or more axes in a tensor.
            </summary>
      <remarks>
        <para>Use the <see cref="T:Numerics.NET.Axes" /> struct to represent a collection of dimensions in a tensor.
            In most cases, <see cref="T:Numerics.NET.Axes" /> values can be created using an implicit conversion.
            For a single axis, use an integer. For 2 or more axes, use a tuple of integers.
            </para>
        <para>Negative values for axes are allowed. This indicates that the axis should be counted
            from the end.
            </para>
        <para>
            Some methods require that the axes collection be normalized so that all axes have 
            specific positive values. The <see cref="M:Numerics.NET.Axes.Normalize(System.Int32)" /> method turns any collection
            into a normalized collection.</para>
        <para>
          <see cref="T:Numerics.NET.Axes" /> values are immutable. There can be a maximum of 31 axes.</para>
      </remarks>
    </member>
    <member name="F:Numerics.NET.Axes.All">
      <summary>
            Gets an axes collection that contains all available axes.
            </summary>
    </member>
    <member name="M:Numerics.NET.Axes.AllOfRank(System.Int32)">
      <summary>
            Gets a collection of all axes that are present in a tensor of the specified rank.
            </summary>
      <param name="rank">The number of axes.</param>
      <returns>A collection of the axes from 0 up to but excluding <paramref name="rank" />.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.Complement(System.Int32)">
      <summary>
            Gets the axis collection of all available axes that are not contained
            in the axis collection.
            </summary>
      <param name="rank">The total number of axes in the resulting collection.</param>
      <returns>An axis collection that contains all the axes up to <paramref name="rank" />
            that are not included in the current collection.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.Contains(System.Int32)">
      <summary>
            Gets whether the axis collection contains the specified axis.
            </summary>
      <param name="axis">The index of the axis to look up.</param>
      <returns>
        <see langword="true" /> if the axis with index <paramref name="axis" />
            is included in the collection; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Numerics.NET.Axes.Count">
      <summary>
            Gets the number of axes in the collection.
            </summary>
    </member>
    <member name="F:Numerics.NET.Axes.Empty">
      <summary>
            Gets an empty collection of axes.
            </summary>
    </member>
    <member name="M:Numerics.NET.Axes.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:Numerics.NET.Axes.IsNormalized">
      <summary>
            Gets whether the axis collection contains only axes counted from 0.
            </summary>
    </member>
    <member name="M:Numerics.NET.Axes.Normalize(System.Int32)">
      <summary>
            Gets the collection of axes in the current collection that are present
            in a tensor of the specified rank.
            </summary>
      <param name="rank">A non-negative integer that specifies the rank.</param>
      <returns>A collection of the axes in this collection that are present in
            a tensor of rank <paramref name="rank" />.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.op_Equality(Numerics.NET.Axes,Numerics.NET.Axes)">
      <summary>
            Compares two axis collections for equality.
            </summary>
      <param name="left">The first axis collection to compare.</param>
      <param name="right">The second axis collection to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> contain the same strides;
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.Int32)~Numerics.NET.Axes">
      <summary>
            Implicitly converts an integer to an axis collection.
            </summary>
      <param name="axis">The index of the one axis in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Numerics.NET.Axes">
      <summary>
            Implicitly converts a pair of integers to an axis collection.
            </summary>
      <param name="axes">A tuple of two integers that contain the index 
            of the axes in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~Numerics.NET.Axes">
      <summary>
            Implicitly converts a triplet of integers to an axis collection.
            </summary>
      <param name="axes">A tuple of three integers that contain the index 
            of the axes in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Axes">
      <summary>
            Implicitly converts a quartet of integers to an axis collection.
            </summary>
      <param name="axes">A tuple of four integers that contain the index 
            of the axes in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Axes">
      <summary>
            Implicitly converts a quintuplet of integers to an axis collection.
            </summary>
      <param name="axes">A tuple of five integers that contain the index 
            of the axes in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Axes">
      <summary>
            Implicitly converts a sextuplet of integers to an axis collection.
            </summary>
      <param name="axes">A tuple of six integers that contain the index 
            of the axes in the collection.</param>
    </member>
    <member name="M:Numerics.NET.Axes.op_Inequality(Numerics.NET.Axes,Numerics.NET.Axes)">
      <summary>
            Compares two axis collections for inequality.
            </summary>
      <param name="left">The first axis collection to compare.</param>
      <param name="right">The second axis collection to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> have a different rank or
            at least one dimension of a different size; 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Axes.op_Subtraction(Numerics.NET.Axes,System.Int32)">
      <summary>
            Returns a new axis collection that has the specified axis removed.
            </summary>
      <param name="axes">The axis collection to start from.</param>
      <param name="axis">The index of the exis to remove from <paramref name="axes" />.</param>
    </member>
    <member name="M:Numerics.NET.Axes.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Represents a tensor index that can be used to specify
            advanced indexing operations.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Range)~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a <see cref="T:Numerics.NET.Range" /> to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <param name="range">A <see cref="T:Numerics.NET.Range" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Slice)~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a <see cref="T:Numerics.NET.Slice" /> to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="slice">A <see cref="T:Numerics.NET.Slice" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Tensors.Tensor{System.Boolean})~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a boolean vector to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="mask">The vector to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Tensors.Tensor{System.Int32})~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts an integer to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="indexes">The tensor to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Tensors.TensorIndex)~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="index">The index to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Vector{System.Boolean})~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a boolean vector to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="mask">The vector to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(Numerics.NET.Vector{System.Int32})~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts an integer vector to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="indexes">The vector to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(System.Boolean[])~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts a boolean array to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="mask">The array to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(System.Int32)~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts an integer to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <param name="index">An integer index.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.AdvancedTensorIndex.op_Implicit(System.Int32[])~Numerics.NET.Tensors.AdvancedTensorIndex">
      <summary>
            Implicitly converts an integer array to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.
            </summary>
      <param name="indexes">The array to convert.</param>
    </member>
    <member name="T:Numerics.NET.Tensors.ITensor">
      <summary>
            Represents the common properties and methods for tensors.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.ITensor.Layout">
      <summary>
            Gets the layout of the tensor.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.ITensor.Rank">
      <summary>
            Gets the rank of the tensor.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.ITensor.Shape">
      <summary>
            Gets the shape of the tensor.
            </summary>
    </member>
    <member name="T:Numerics.NET.Tensors.Tensor">
      <summary>
            Contains static methods that operate on tensors.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Abs``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the absolute value of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the absolute value
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMax``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the element with largest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with largest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMax``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with largest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMaxIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the element with the largest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the element with the largest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMaxIndex``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the elements of a tensor with the largest absolute value
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the largest
            element of <paramref name="operand" /> that satisfies 
            <paramref name="mask" /> along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the element with smallest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with smallest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with smallest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMinIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the element with the smallest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the element with the smallest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AbsoluteMinIndex``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the elements of a tensor with the smallest absolute value
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the smallest 
            element of <paramref name="operand" /> that satisfies 
            <paramref name="mask" /> along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Acos``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse cosine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Acosh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic cosine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Add``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Add``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Add``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AddProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies two tensors elementwise and multiplies the result by a third.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" />
            whose elements are equal to the result
            of the corresponding elements of 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.All(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether all elements of a boolean tensor 
            along the specified axis are <see langword="true" />.
            </summary>
      <param name="operand">A boolean tensor.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether all elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> are true.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.All(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether all elements of a boolean tensor are <see langword="true" />.
            </summary>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if all elements that satisfy <paramref name="mask" />
            are <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.And``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.And``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.And``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Any(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether any elements of a boolean tensor 
            along the specified axis are <see langword="true" />.
            </summary>
      <param name="operand">A boolean tensor.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether any elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> are true.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Any(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether any elements of a boolean tensor are <see langword="true" />.
            </summary>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if any elements that satisfy <paramref name="mask" />
            are <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Asin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse sine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Asinh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic sine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Atan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Atan2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Atan2``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Atan2``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the inverse tangent
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Atanh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic tangent
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast1D``1(Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Returns an equivalent tensor that has at least one dimension.
            </summary>
      <param name="tensor">A tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>
        <paramref name="tensor" /> if its tensor rank
            is at least 1; otherwise a rank-1 tensor
            with 1 element.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast1D``1(Numerics.NET.Tensors.Tensor{``0}[])">
      <summary>
            Returns an array of equivalent tensors that have 
            at least one dimension.
            </summary>
      <param name="tensors">An array of tensors.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>An array of tensors. If the tensor rank of
            an element of <paramref name="tensors" /> is at least 1,
            then the tensor is returned unmodified; otherwise it
            is replaced with a rank-1 tensor with 1 element.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast2D``1(Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Returns an equivalent tensor that has at least two dimensions.
            </summary>
      <param name="tensor">A tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>
        <paramref name="tensor" /> if its tensor rank
            is at least 2; otherwise a rank-2 tensor
            with 1 row.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast2D``1(Numerics.NET.Tensors.Tensor{``0}[])">
      <summary>
            Returns an array of equivalent tensors that have 
            at least two dimensions.
            </summary>
      <param name="tensors">An array of tensors.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>An array of tensors. If the tensor rank of
            an element of <paramref name="tensors" /> is at least 2,
            then the tensor is returned unmodified; otherwise it
            is replaced with a rank-2 tensor with 1 row.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast3D``1(Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Gets an equivalent tensor that has at least three dimensions.
            </summary>
      <param name="tensor">A tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>
        <paramref name="tensor" /> if its tensor rank
            is at least 3; otherwise a rank-3 tensor
            with a depth of 1.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.AtLeast3D``1(Numerics.NET.Tensors.Tensor{``0}[])">
      <summary>
            Returns an array of equivalent tensors that have 
            at least three dimensions.
            </summary>
      <param name="tensors">An array of tensors.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>An array of tensors. If the tensor rank of
            an element of <paramref name="tensors" /> is at least 3,
            then the tensor is returned unmodified; otherwise it
            is replaced with a rank-3 tensor with depth 1.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Cbrt``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cube root of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cube root
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Ceiling``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest integer that is not greater than the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the rounded up value
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Clamp``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the values of a tensor clamped by the corresponding values of two other tensors.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" />
            whose elements are equal to the clamped value
            of the corresponding elements of 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Concatenate``1(Numerics.NET.Tensors.Tensor{``0}[],System.Int32,Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Concatenates a sequence of tensors along the specified axis.
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="axis">Optional. The axis along which to concatenate
            the tensors.</param>
      <param name="result">Optional. The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />
            concatenated along dimension <paramref name="axis" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axis" /> is less than zero or greater than
            or equal to the tensor rank of the elements of 
            <paramref name="tensors" />.
            </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            concatenated tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Correlation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the correlation of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the correlation of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the correlation of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Correlation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the correlation of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the correlation of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Cos``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cosine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Cosh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic cosine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CosineSimilarity``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cosine similarity of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the cosine similarity of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the cosine similarity of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CosineSimilarity``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the cosine similarity of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the cosine similarity of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Covariance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the covariance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the covariance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the covariance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Covariance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the covariance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the covariance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Create``1(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Constructs a new tensor with the specified shape.
            </summary>
      <param name="shape">The <see cref="T:Numerics.NET.Tensors.TensorShape" /> of the new tensor.</param>
      <param name="order">Optional. The order in which elements
            are stored. The default is C-style.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A new dense tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Create``1(System.Int32[])">
      <summary>
            Constructs a new 3D tensor with the specified dimensions.
            </summary>
      <param name="dimensions">An array containing the dimensions of the tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A new dense tensor with elements stored in C-style order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="dimensions" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the elements of <paramref name="dimensions" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[0:,0:,0:,0:])">
      <summary>
            Constructs a 4-dimensional tensor
            from a 4-dimensional array.
            </summary>
      <param name="values">An array containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 4-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[0:,0:,0:])">
      <summary>
            Constructs a 3-dimensional tensor
            from a 3-dimensional array.
            </summary>
      <param name="values">An array containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 3-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[0:,0:])">
      <summary>
            Constructs a 2-dimensional tensor
            from a 2-dimensional array.
            </summary>
      <param name="values">An array containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 2-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[])">
      <summary>
            Constructs a 1-dimensional tensor
            from a 1-dimensional array.
            </summary>
      <param name="values">An array containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 1-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[],Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="order">Optional. Specifies the order in which elements are stored
            in <paramref name="values" />.
            The default is C-style (row major).</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used to store the tensor's elements. The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[],Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorLayout,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="layout">The layout of the tensor elements.</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used as storage for the tensor. The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromArray``1(``0[],System.Boolean)">
      <summary>
            Constructs a 1-dimensional tensor
            from a 1-dimensional array.
            </summary>
      <param name="values">An array containing the elements
            of the new tensor.</param>
      <param name="createView">Specifies whether the tensor should be a
            view of the array or a copy.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 1-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromFunction``1(Numerics.NET.Tensors.TensorShape,System.Func{System.Int32,``0},Numerics.NET.ArrayMutability)">
      <summary>
            Creates a new 1-dimensional tensor and initializes the elements
            using the specified function."/&gt;
            </summary>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="function">A function that computes the value
            of the tensor element for the specified index.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 1D tensor with shape <paramref name="shape" />
            initialized using <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="function" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The rank of <paramref name="shape" /> is not equal to one.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the dimensions in <paramref name="shape" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromFunction``1(Numerics.NET.Tensors.TensorShape,System.Func{System.Int32,System.Int32,``0},Numerics.NET.Tensors.TensorElementOrder,Numerics.NET.ArrayMutability)">
      <summary>
            Creates a new 2-dimensional tensor and initializes the elements
            using the specified function.
            </summary>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="function">A function that computes the value
            of the tensor element for the specified index.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 2D tensor with shape <paramref name="shape" />
            initialized using <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="function" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The rank of <paramref name="shape" /> is not equal to 2.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the dimensions in <paramref name="shape" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromFunction``1(Numerics.NET.Tensors.TensorShape,System.Func{System.Int32,System.Int32,System.Int32,``0},Numerics.NET.Tensors.TensorElementOrder,Numerics.NET.ArrayMutability)">
      <summary>
            Creates a new 3-dimensional tensor and initializes the elements
            using the specified function.
            </summary>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="function">A function that computes the value
            of the tensor element for the specified index.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 3D tensor with shape <paramref name="shape" />
            initialized using <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="function" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The rank of <paramref name="shape" /> is not equal to 3.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the dimensions in <paramref name="shape" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromFunction``1(Numerics.NET.Tensors.TensorShape,System.Func{System.Int32,System.Int32,System.Int32,System.Int32,``0},Numerics.NET.Tensors.TensorElementOrder,Numerics.NET.ArrayMutability)">
      <summary>
            Creates a new 4-dimensional tensor and initializes the elements
            using the specified function.
            </summary>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="function">A function that computes the value
            of the tensor element for the specified index.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 4D tensor with shape <paramref name="shape" />
            initialized using <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="function" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The rank of <paramref name="shape" /> is not equal to 4.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the dimensions in <paramref name="shape" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromFunction``1(System.Int32,System.Func{System.Int32,``0},Numerics.NET.ArrayMutability)">
      <summary>
            Creates a new 1-dimensional tensor and initializes the elements
            using the specified function.
            </summary>
      <param name="length">The number of elements in the tensor.</param>
      <param name="function">A function that computes the value
            of the tensor element for the specified index.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 1D tensor of length <paramref name="length" />
            initialized using <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="function" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="length" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromMatrix``1(Numerics.NET.Matrix{``0})">
      <summary>
            Constructs a 2-dimensional tensor
            from a 2-dimensional array.
            </summary>
      <param name="matrix">An array containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 2-dimensional tensor of the same shape
            and with the same elements as <paramref name="matrix" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromMemory``1(System.Memory{``0},Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="order">Optional. Specifies the order in which elements are stored.
            The default is <c>CStyle</c>.</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used to store the tensor's elements.
            The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromMemory``1(System.Memory{``0},Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorLayout,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="layout">The layout of the tensor elements.</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used to store the tensor's elements. 
            The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateFromSpan``1(System.ReadOnlySpan{``0})">
      <summary>
            Constructs a 1-dimensional tensor
            from a span.
            </summary>
      <param name="values">A span containing the elements
            of the new tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 1-dimensional tensor of the same shape
            and with the same elements as <paramref name="values" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateGeometricRange``1(``0,``0,System.Int32,System.Boolean,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from 
            the specified range.
            </summary>
      <param name="start">The first value in the range.</param>
      <param name="stop">The upper bound for the range.</param>
      <param name="steps">The number of values.</param>
      <param name="endPoint">Indicates whether <paramref name="stop" />
            is included in the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" /> whose values
            are a geometric series from <paramref name="start" /> to
            <paramref name="stop" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="steps" /> is less than zero.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateLogarithmicRange``1(``0,``0,System.Int32,System.Boolean,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from 
            the specified range.
            </summary>
      <param name="start">The first exponent value in the range.</param>
      <param name="stop">The upper bound for the exponent range.</param>
      <param name="steps">The number of values.</param>
      <param name="endPoint">Indicates whether <paramref name="stop" />
            is included in the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" /> whose values
            are 10 raised to a range of
            powers from <paramref name="start" /> to
            <paramref name="stop" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="steps" /> is less than zero.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateLogarithmicRange``1(``0,``0,System.Int32,System.Boolean,``0,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from 
            the specified range.
            </summary>
      <param name="start">The first exponent value in the range.</param>
      <param name="stop">The upper bound for the exponent range.</param>
      <param name="steps">The number of values.</param>
      <param name="endPoint">Indicates whether <paramref name="stop" />
            is included in the range.</param>
      <param name="baseValue">The base for the numbers in the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" /> whose values
            are <paramref name="baseValue" /> raised to a range of
            powers from <paramref name="start" /> to
            <paramref name="stop" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="steps" /> is less than zero.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRandom(Numerics.NET.Tensors.TensorShape,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with uniform random numbers between 0 and 1.
            </summary>
      <param name="shape">The shape of the tensor.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="shape" /> is not a valid tensor shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRandom(Numerics.NET.Tensors.TensorShape,System.Random,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with uniform random numbers between 0 and 1.
            </summary>
      <param name="shape">The shape of the tensor.</param>
      <param name="random">The random number generator to use.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="shape" /> is not a valid tensor shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRandomNormal(Numerics.NET.Tensors.TensorShape,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with normal random numbers with zero mean and unit
            standard deviation.
            </summary>
      <param name="shape">The shape of the tensor.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="shape" /> is not a valid tensor shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRandomNormal(Numerics.NET.Tensors.TensorShape,System.Random,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with normal random numbers with zero mean and unit
            standard deviation.
            </summary>
      <param name="shape">The shape of the tensor.</param>
      <param name="random">The random number generator to use.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="shape" /> is not a valid tensor shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRange``1(``0,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from 0 up to the specified value.
            </summary>
      <param name="stop">The upper bound for the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRange``1(``0,``0,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new 1D tensor with elements from the specified range..
            </summary>
      <param name="start">The first value in the range.</param>
      <param name="stop">The (inclusive) upper bound for the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRange``1(``0,``0,System.Int32,System.Boolean,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from 
            the specified range.
            </summary>
      <param name="start">The first value in the range.</param>
      <param name="stop">The upper bound for the range.</param>
      <param name="steps">The number of values.</param>
      <param name="endPoint">Indicates whether <paramref name="stop" />
            is included in the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="steps" /> is less than zero.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateRange``1(``0,``0,``0,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a new tensor with elements from the specified range..
            </summary>
      <param name="start">The first value in the range.</param>
      <param name="stop">The (inclusive) upper bound for the range.</param>
      <param name="step">The distance between successive values in the range.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A <see cref="T:Numerics.NET.Tensors.DenseTensor`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="step" /> is so small that the length of the number of steps is too large.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CreateScalar``1(``0,Numerics.NET.ArrayMutability)">
      <summary>
            Constructs a 0-dimensional tensor
            that represents a scalar value.
            </summary>
      <param name="value">A scalar value.</param>
      <param name="mutability">Optional. Specifies how the tensor's values may be changed.
            The default is mutable values.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A 0-dimensional tensor 
            whose only value is <paramref name="value" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CumulativeProduct``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cumulative product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            
            whose elements are equal to the cumulative product
            of the corresponding elements of 
            
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.CumulativeSum``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cumulative sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            
            whose elements are equal to the cumulative sum
            of the corresponding elements of 
            
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Divide``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Divide``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Divide``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the quotient
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.DotProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the dot product of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the dot product of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the dot product of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.DotProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the dot product of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the dot product of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.EqualTo``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares two tensors elementwise for equality.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.EqualTo``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a tensor and a scalar for equality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.EqualTo``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a scalar and a tensor for equality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.EuclideanDistance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the Euclidean distance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the Euclidean distance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the Euclidean distance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.EuclideanDistance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the Euclidean distance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the Euclidean distance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" />
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Exp``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Exp10``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function (base 10) of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function (base 10)
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Exp2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function (base 2) of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function (base 2)
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.ExpM1``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor.False">
      <summary>
            Gets a boolean scalar tensor with the value <see langword="false" />.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Find(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Gets the linearized indexes where the specified boolean
            tensor is true.
            </summary>
      <param name="entries">A boolean tensor.</param>
      <returns>An integer array of linearized indexes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="entries" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Floor``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest integer that is not less than the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the rounded down value
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are greater than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThan``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are greater than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThan``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are greater than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are greater than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.GreaterThanOrEqual``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are greater than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Hypot``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of the elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the hypotenuse
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Hypot``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the hypotenuse
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Hypot``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the hypotenuse
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Identity``1(System.Int32,System.Int32,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns a 2D tensor that is 1 on the specified diagonal
            and zero everywhere else.
            </summary>
      <param name="size">The number of rows and columns of the tensor.</param>
      <param name="diagonal">Optional. The diagonal that contains
            the unit elements. The default (0) indicates the main diagonal.
            Positive values indicate a diagonal above the main diagonal.
            Negative values indicate a diagonal below the main diagonal.</param>
      <param name="order">Optional. The order of the elements in the
            tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor with <paramref name="size" /> rows and columns
            with ones on the diagonal specified by 
            <paramref name="diagonal" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="size" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Identity``1(System.Int32,System.Int32,System.Int32,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns a 2D tensor that is 1 on the specified diagonal
            and zero everywhere else.
            </summary>
      <param name="rowCount">The number of rows of the tensor.</param>
      <param name="columnCount">The number of columns of the tensor.</param>
      <param name="diagonal">Optional. The diagonal that contains
            the unit elements. The default (0) indicates the main diagonal.
            Positive values indicate a diagonal above the main diagonal.
            Negative values indicate a diagonal below the main diagonal.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor with <paramref name="rowCount" /> rows and 
            <paramref name="columnCount" /> columns
            with ones on the diagonal specified by 
            <paramref name="diagonal" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="rowCount" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="columnCount" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.If``1(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Selects the elements of one of two tensors based on a condition.
            </summary>
      <param name="condition">A boolean tensor that specifies whether the
            corresponding element from <paramref name="trueValues" /> or
            <paramref name="falseValues" /> should be returned.</param>
      <param name="trueValues">A tensor that contains the values that
            should be returned if the corresponding element in <paramref name="mask" />
            is <see langword="true" />.</param>
      <param name="falseValues">A tensor that contains the values that
            should be returned if the corresponding element in <paramref name="mask" />
            is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors and the result.</typeparam>
      <returns>A tensor whose elements are taken from either <paramref name="trueValues" />
            or <paramref name="falseValues" />, depending on the corresponding element
            in <paramref name="mask" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="condition" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="trueValues" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="falseValues" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.ImaginaryPart``1(Numerics.NET.Tensors.Tensor{Numerics.NET.Complex{``0}})">
      <summary>
            Returns a tensor with the imaginary part of the elements of a tensor of complex numbers.
            </summary>
      <param name="tensor"></param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A view of <paramref name="tensor" /> whose elements are
            the imaginary parts of the corresponding elements in <paramref name="tensor" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.IsNullOrTrue(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Gets whether the specified boolean tensor is <see langword="null" /> or
            a scalar tensor with value <see langword="true" />.
            </summary>
      <param name="value">The tensor to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is <see langword="null" />
            or a scalr tensor with value <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LeftShift``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the left.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LeftShift``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the left..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LeftShift``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts a scalar to the left..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the shift
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThan``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are less than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThan``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are less than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are less than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.LessThanOrEqual``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are less than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor in the base specified by another tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor to base a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of a scalar to base the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the logarithm
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log10``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the base 10 logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the base 10 logarithm
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log1p``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Log2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the base 2 logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the base 2 logarithm
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Map``2(System.Func{``0,``1},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the corresponding elements of two tensors 
            and returns the result in a third tensor.
            </summary>
      <param name="function">A delegate that represents a function of two variables</param>
      <param name="operand">A tensor whose elements serve as the argument to the function.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to the elements of <paramref name="operand" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            <para>-or-</para><para><paramref name="operand" /> is <see langword="null" /></para></exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Map``3(System.Func{``0,``1,``2},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the corresponding elements of two tensors 
            and returns the result in a third tensor.
            </summary>
      <param name="function">A delegate that represents a function of two variables</param>
      <param name="first">A tensor whose elements serve as the first argument to the function.</param>
      <param name="second">A tensor whose elements serve as the second argument to the function.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="first" />
            and <paramref name="second" />.</param>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to the corresponding elements of <paramref name="first" /> and <paramref name="second" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            <para>-or-</para><para><paramref name="first" /> is <see langword="null" /></para><para>-or-</para><para><paramref name="second" /> is <see langword="null" /></para></exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The length of <paramref name="first" /> does not equal the length of <paramref name="second" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MapInto``2(System.Func{``0,``1},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the elements of a tensor.
            </summary>
      <param name="function">A delegate that represents a function of one variable.</param>
      <param name="operand">A tensor whose elements serve as the argument to the function.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the operand of the function.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to the elements of <paramref name="operand" />.</returns>
      <remarks>
        <para>The shapes of all tensor operands, including <paramref name="mask" /> (if present),
            must be compatible. When <paramref name="result" /> is given, all other tensors
            must be broadcastable into it. Otherwise, the shape of the result is
            the smallest shape that all other tensor arguments can be broadcast into.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            <para>-or-</para><para><paramref name="operand" /> is <see langword="null" /></para></exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MapInto``3(System.Func{``0,``1,``2},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{``2},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the corresponding elements of two tensors.
            </summary>
      <param name="function">A delegate that represents a function of two variables</param>
      <param name="first">A tensor whose elements serve as the first argument to the function.</param>
      <param name="second">A tensor whose elements serve as the second argument to the function.</param>
      <param name="result">The tensor that is to hold the result. May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to the corresponding elements of <paramref name="first" /> and <paramref name="second" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            <para>-or-</para><para><paramref name="first" /> is <see langword="null" /></para><para>-or-</para><para><paramref name="second" /> is <see langword="null" /></para></exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The length of <paramref name="first" /> does not equal the length of <paramref name="second" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MapInto``4(System.Func{``0,``1,``2,``3},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{``2},Numerics.NET.Tensors.Tensor{``3},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the corresponding elements of three tensors.
            </summary>
      <param name="function">A delegate that represents a function of two variables</param>
      <param name="first">A tensor whose elements serve as the first argument to the function.</param>
      <param name="second">A tensor whose elements serve as the second argument to the function.</param>
      <param name="third">A tensor whose elements serve as the second argument to the function.</param>
      <param name="result">The tensor that is to hold the result. May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T1">The type of the first operand of the function.</typeparam>
      <typeparam name="T2">The type of the second operand of the function.</typeparam>
      <typeparam name="T3">The type of the third operand of the function.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to the corresponding elements of <paramref name="first" /> and <paramref name="second" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            <para>-or-</para><para><paramref name="first" /> is <see langword="null" /></para><para>-or-</para><para><paramref name="second" /> is <see langword="null" /></para><para>-or-</para><para><paramref name="third" /> is <see langword="null" /></para></exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The length of <paramref name="first" /> does not equal the length of <paramref name="second" />.</para>
        <para>-or-</para>
        <para>The length of <paramref name="first" /> does not equal the length of <paramref name="third" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MatrixMultiply``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Performs matrix multiplication over the last two dimensions of a pair of tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>The matrix product of <paramref name="left" /> and
            <paramref name="right" />.</returns>
      <remarks>
        <para>
          <paramref name="left" /> and <paramref name="right" /> must be 
            at least one-dimensional. Scalars are not allowed.</para>
        <para>The result is always a tensor, even when the product
            is equivalent to the dot product of two vectors.</para>
      </remarks>
      <exception cref="T:System.RankException">
        <para>
          <paramref name="left" /> or <paramref name="right" /> is a scalar.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The size of the last dimension of <paramref name="left" /> does not
            equal the size of the second to last dimension of <paramref name="right" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Max``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest of corresponding elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Max``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maxima of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the maximum of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Max``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Max``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the maximum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the largest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the largest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxIndex``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the largest elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the largest
            element of <paramref name="operand" /> that satisfies 
            <paramref name="mask" /> along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxNumber``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest of corresponding elements of two tensors without propagating NaN's (where applicable).
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxNumber``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxNumber``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the maximum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the largest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the largest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MaxValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the largest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Mean``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the mean of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Mean``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Median``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the mean of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Median``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Min``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest of corresponding elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Min``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minima of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the minimum of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Min``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Min``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the minimum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the smallest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the smallest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinIndex``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the smallest elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A condition that 
            elements must satisfy to be included in the reduction.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the smallest 
            element of <paramref name="operand" /> that satisfies 
            <paramref name="mask" /> along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinNumber``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest of corresponding elements of two tensors without propagating NaN's (where applicable).
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinNumber``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinNumber``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the minimum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the smallest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the smallest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MinValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the smallest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Modulus``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns the remainder after dividing one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Modulus``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the remainder after dividing a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Modulus``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the remainder after dividing a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the modulus
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Multiply``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Multiply``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Multiply``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the product
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.MultiplySum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds two tensors and multiplies the result elementwise by a third.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" />
            whose elements are equal to the result
            of the corresponding elements of 
            <paramref name="first" />, <paramref name="left" />, and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Negate``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Negates a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the negation
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Norm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the two-norm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the two-norm of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the two-norm of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Norm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the two-norm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the two-norm of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Not``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise complement of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the bitwise complement
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.NotEqualTo``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares two tensors elementwise for inequality.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.NotEqualTo``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a tensor and a scalar for inequality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.NotEqualTo``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a scalar and a tensor for inequality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.OneNorm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sum of the absolute values of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the sum of the absolute values of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the absolute values of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.OneNorm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the sum of the absolute values of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the absolute values of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Or``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Or``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Or``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Percentile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the percentiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentage">A value between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="type">Optional. The type of percentile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the percentiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Percentile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the quantile of the elements of a tensor.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentage">A value between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="type">Optional. The type of percentile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>The quantile of the elements of <paramref name="operand" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Percentiles``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IEnumerable{System.Double},Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the percentiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentages">A sequence of values between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to compute the percentiles.</param>
      <param name="type">Optional. The type of percentile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the percentiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to an integer power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to a power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to an integer power.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to a power.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises a scalar to an integer power.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Pow``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises a scalar to a power.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Product``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the product of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the product of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Product``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the product of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Quantile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the quantiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probability">A value between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.
            </param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the quantiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Quantile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the quantile of the elements of a tensor.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probability">A value between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.
            </param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>The quantile of the elements of <paramref name="operand" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Quantiles``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IEnumerable{System.Double},Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the quantiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probabilities">A sequence of values between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to compute the quantiles.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the quantiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RealPart``1(Numerics.NET.Tensors.Tensor{Numerics.NET.Complex{``0}})">
      <summary>
            Returns a tensor with the real part of the elements of a tensor of complex numbers.
            </summary>
      <param name="tensor"></param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A view of <paramref name="tensor" /> whose elements are
            the real parts of the corresponding elements in <paramref name="tensor" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Reciprocal``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the reciprocal of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the reciprocal
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RemoveSingletonAxes``1(Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Removes all singleton dimensions from a tensor.
            </summary>
      <param name="tensor">A tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>If <paramref name="tensor" /> has any singleton
            dimensions (of length 1), then a tensor of lower rank
            with these dimensions removed; otherwise,
            <paramref name="tensor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RightShift``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the right.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RightShift``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the right..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RightShift``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts a scalar to the right..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the shift
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RootN``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of the elements of a tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the root
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RootN``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of a the elements of a tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the root
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.RootN``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of a a scalar.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the root
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Round``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds the elements of a tensor to the specified number of digits.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the round
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Round``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds the elements of a tensor to the specified number of digits..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the round
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Round``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds a scalar to the specified number of digits..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the round
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the sine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sinh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic sine
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.SoftMax``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies the SoftMax function along the specified axis of a tensor.
            </summary>
      <param name="tensor">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the transformation. The default is <see langword="false" />.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="tensor" />
            whose elements are equal to the sorted
            of the corresponding elements of 
            <paramref name="tensor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sort``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IComparer{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Sorts the elements of a tensor.
            </summary>
      <param name="tensor">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use 
            when comparing elements, or null to use <see cref="P:Numerics.NET.Operations`1.Comparer" />.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="tensor" />
            whose elements are equal to the sorted
            of the corresponding elements of 
            <paramref name="tensor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sort``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Sorts the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            
            whose elements are equal to the sorted
            of the corresponding elements of 
            
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sqrt``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the square root
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Stack``1(Numerics.NET.Tensors.Tensor{``0}[],System.Int32,Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Concatenates a sequence of tensors into a tensor of a higher
            dimension.
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="axis">Optional. The axis of the new dimension 
            in the result.</param>
      <param name="result">Optional. The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />
            stacked along dimension <paramref name="axis" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axis" /> is less than zero or greater than
            the tensor rank of the elements of <paramref name="tensors" />.
            </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackColumns``1(Numerics.NET.Tensors.Tensor{``0}[],Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Stacks 1D tensors as columns in a 2D array.
            </summary>
      <param name="tensors">An array of 1D tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="result">Optional. The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            converted to 2D column arrays and stacked horizontally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackDeep``1(Numerics.NET.Tensors.Tensor{``0}[],Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Stacks tensors in the third (depth) dimension.
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="result">Optional. The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked depth-wise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackHorizontal``1(Numerics.NET.Tensors.Tensor{``0}[])">
      <summary>
            Stacks tensors horizontally (by column).
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked horizontally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackHorizontalInto``1(Numerics.NET.Tensors.Tensor{``0}[],Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Stacks tensors horizontally (by column).
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="result">The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked horizontally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackRows``1(Numerics.NET.Tensors.Tensor{``0}[],Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Stacks 1D tensors by row.
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="result">Optional. The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked vertically.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackVertical``1(Numerics.NET.Tensors.Tensor{``0}[])">
      <summary>
            Stacks tensors vertically (by row).
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked vertically.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StackVerticalInto``1(Numerics.NET.Tensors.Tensor{``0}[],Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Stacks tensors vertically (by row).
            </summary>
      <param name="tensors">An array of tensors with elements
            of type <typeparamref name="T" />.</param>
      <param name="result">The tensor that is to hold
            the result. May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>The tensors in <paramref name="tensors" />,
            upgraded to have dimension at least two,
            stacked vertically.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensors" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>One or more of the elements of <paramref name="tensors" />
            is null.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>One or more elements of <paramref name="tensors" />
            has dimensions that are not compatible with the others.</para>
        <para>-or-</para>
        <para>
          <paramref name="result" /> is not <see langword="null" />
            and its dimensions do not match the dimensions of the 
            stacked tensors.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StandardDeviation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the standard deviation of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the standard deviation of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the standard deviation of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.StandardDeviation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the standard deviation of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the standard deviation of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Subtract``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts one tensor from another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Subtract``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts a scalar from a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Subtract``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts a tensor from a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the difference
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the sum of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Sum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Swap``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0})">
      <summary>
            Swaps the elements of two tensors.
            </summary>
      <param name="first">A tensor whose elements serve as the first argument to the function.</param>
      <param name="second">A tensor whose elements serve as the second argument to the function.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" /></para>
        <para>-or-</para>
        <para>
          <paramref name="second" /> is <see langword="null" /></para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The shape of <paramref name="first" /> does not equal 
            the shape of <paramref name="second" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Tan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the tangent
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Tanh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic tangent
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor.True">
      <summary>
            Gets a boolean scalar tensor with the value <see langword="true" />.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Truncate``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Truncates the elements of a tensor to the nearest integer.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the truncated value
            of the corresponding elements of 
            <paramref name="value" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Variance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the variance of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the variance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the variance of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Variance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the variance of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the variance of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Xor``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Xor``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor.Xor``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="T:Numerics.NET.Tensors.Tensor`1">
      <summary>
            Represents a multi-dimensional array of elements of the same type.
            </summary>
      <typeparam name="T">The type of the elements.</typeparam>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.#ctor">
      <summary>
            Constructs a new tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new tensor from serialization data.
            </summary>
      <param name="info">The data needed to serialize or deserialize
            the <see cref="T:Numerics.NET.Tensors.Tensor`1" />. </param>
      <param name="context">The source and destination of a given
            serialized stream.</param>
      <remarks>
        <para>This constructor is called internally by the
            .NET framework when a <see cref="T:Numerics.NET.Tensors.Tensor`1" /> is
            deserialized.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AbsInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the absolute value of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their absolute value.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AcoshInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic cosine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic cosine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AcosInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse cosine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse cosine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AddInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AddInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds a tensor and a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AddProductInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Multiplies two tensors elementwise and multiplies the result by a third in place.
            </summary>
      <param name="left">A tensor whose elements serve as the second operand.</param>
      <param name="right">A tensor whose elements serve as the third operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the result of the element and the corresponding
            elements of <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.All``1(``0,Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether all elements of the tensor 
            along the specified axis satisfy the specified predicate.
            </summary>
      <param name="predicate">A 'fast' function that evaluates the predicate
            each element is tested for.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of the current tensor.</param>
      <typeparam name="TPredicate">The type of <paramref name="predicate" />.</typeparam>
      <returns>A tensor containing a value that indicates whether all elements of 
            the tensor that satisfy <paramref name="mask" />
            along <paramref name="axis" /> satisfy <paramref name="predicate" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.All``1(``0,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes whether all elements of the tensor 
            satisfy the specified predicate.
            </summary>
      <param name="predicate">A 'fast' function that evaluates the predicate
            each element is tested for.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="TPredicate">The type of <paramref name="predicate" />.</typeparam>
      <returns>
        <see langword="true" /> if all elements of the tensor that satisfy 
            <paramref name="mask" /> satisfy <paramref name="predicate" />;
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AndInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise and of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AndInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise and of a tensor and a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Any``1(``0,Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether any elements of the tensor 
            along the specified axis satisfy the specified predicate.
            </summary>
      <param name="predicate">A 'fast' function that evaluates the predicate
            each element is tested for.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of the current tensor.</param>
      <typeparam name="TPredicate">The type of <paramref name="predicate" />.</typeparam>
      <returns>A tensor containing a value that indicates whether all elements of 
            the tensor that satisfy <paramref name="mask" />
            along <paramref name="axis" /> satisfy <paramref name="predicate" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Any``1(``0,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes whether any elements of the tensor 
            satisfy the specified predicate.
            </summary>
      <param name="predicate">A 'fast' function that evaluates the predicate
            each element is tested for.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="TPredicate">The type of <paramref name="predicate" />.</typeparam>
      <returns>
        <see langword="true" /> if any elements of 
            the tensor that satisfy <paramref name="mask" />
            satisfy <paramref name="predicate" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.As``1">
      <summary>
            Casts the tensor as a tensor of the specified type.
            </summary>
      <typeparam name="U">The type to cast the elements to.</typeparam>
      <returns>A tensor with the elements converted from the element type 
            <typeparamref name="T" /> to the type <typeparamref name="U" />.</returns>
      <exception cref="T:System.InvalidCastException">
        <para>Conversion from elements of type
            <typeparamref name="T" /> to type <typeparamref name="U" /> is not supported.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.As``2">
      <summary>
            Casts the tensor as a tensor of the specified type.
            </summary>
      <typeparam name="U">The element type to convert to.</typeparam>
      <typeparam name="TTransform">The type of the converter from
            <typeparamref name="T" /> to <typeparamref name="U" />.</typeparam>
      <returns>A tensor with the elements converted from the element type 
            <typeparamref name="T" /> to the type <typeparamref name="U" /> 
            using a converter of type <typeparamref name="TTransform" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AsinhInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic sine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic sine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AsinInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse sine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse sine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AsMatrix(Numerics.NET.Intent)">
      <summary>
            Returns the tensor as a matrix.
            </summary>
      <param name="intent">An <see cref="T:Numerics.NET.Intent" /> value that
            specifies the intended use of the matrix.</param>
      <returns>A reference to the new <see cref="T:Numerics.NET.Vector`1" />.
            </returns>
      <remarks>
        <para>
            The <paramref name="intent" /> parameter can be used to choose 
            the optimal representation of the matrix for a specific purpose. 
            Note that this method guararantees that the returned
            matrix will be suitable for the specified purpose, 
            but it will not enforce it. For example,
            if the purpose of the matrix is <c>ReadOnly</c>, 
            there is no guarantee that the returned vector will be read-only.
            </para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The tensor has more than two non-singleton dimensions.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AsVector(Numerics.NET.Intent)">
      <summary>
            Returns the tensor as a vector.
            </summary>
      <param name="intent">An <see cref="T:Numerics.NET.Intent" /> value that
            specifies the intended use of the vector.</param>
      <returns>A reference to the new <see cref="T:Numerics.NET.Vector`1" />.
            </returns>
      <remarks>
        <para>
            The <paramref name="intent" /> parameter can be used to choose 
            the optimal representation of the vector for a specific purpose. 
            Note that this method guararantees that the returned
            vector will be suitable for the specified purpose, 
            but it will not enforce it. For example,
            if the purpose of the vector is <c>ReadOnly</c>, 
            there is no guarantee that the returned vector will be read-only.
            </para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The tensor has more than one non-singleton dimension.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Atan2InPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the inverse tangent of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Atan2InPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            inverse tangent of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AtanhInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic tangent of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic tangent.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.AtanInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their inverse tangent.
            </returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Attributes">
      <summary>
            Gets attributes associated with the tensor.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.BackEnd">
      <summary>
            Gets the set of operators for tensors of this element type.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.BroadcastTo(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Broadcasts the current tensor into the specified shape
            </summary>
      <param name="shape">The shape of the broadcast tensor.</param>
      <returns>A view of the current tensor that is equivalent
            to broadcasting the tensor to <paramref name="shape" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CbrtInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cube root of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their cube root.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CeilingInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest integer that is not greater than the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their rounded up value.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ClampInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the values of a tensor clamped by the corresponding values of two other tensors in place.
            </summary>
      <param name="left">A tensor whose elements serve as the second operand.</param>
      <param name="right">A tensor whose elements serve as the third operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the clamped value of the element and the corresponding
            elements of <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CloneEmpty``1(Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns a tensor of the same shape and order of elements as
            this tensor.
            </summary>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of the current tensor.</param>
      <typeparam name="U">The type of the elements of the new tensor.
            </typeparam>
      <returns>A tensor with elements of type <typeparamref name="U" />
            of the same shape and order of elements as this tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CloneEmpty(Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns a tensor of the same shape and order of elements as
            this tensor.
            </summary>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of the current tensor.</param>
      <returns>A tensor of the same shape and order of elements 
            as this tensor.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.CompressedAxis">
      <summary>
            Gets the axis or dimension along which elements are compressed.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Copy(Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns a copy of the tensor.
            </summary>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be copied. If <see langword="null" /> (the default),
            all elements are copied.</param>
      <param name="initializeToZero">Specifies if the elements of the result tensor
            for which <paramref name="mask" /> is <see langword="false" /> should be set to zero.
            The default is true.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.
            </param>
      <returns>A copy of this tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CopyFrom(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Copies the contents of this tensor to another tensor.
            </summary>
      <param name="source">The tensor into which values are copied.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <returns>The copy of the tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CopyTo(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Copies the contents of this tensor to another tensor.
            </summary>
      <param name="destination">The tensor into which values are copied.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <returns>The copy of the tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CoshInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic cosine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their hyperbolic cosine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CosInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cosine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their cosine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CumulativeProductInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cumulative product of the elements of a tensor in place.
            </summary>
      <param name="axis">The axis along which the operation is to be performed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their cumulative product along the dimension <paramref name="axis" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.CumulativeSumInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cumulative sum of the elements of a tensor in place.
            </summary>
      <param name="axis">The axis along which the operation is to be performed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their cumulative sum along the dimension <paramref name="axis" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.DivideInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Divides one tensor by another in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the quotient of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.DivideInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Divides a tensor by a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            quotient of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.ElementType">
      <summary>
            Gets the type of the elements of the tensor.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.Empty">
      <summary>
            Gets an empty (rank -1) tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Equals(Numerics.NET.Tensors.Tensor{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Equals(Numerics.NET.Tensors.Tensor{`0},System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is structurally equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Exp10InPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function (base 10) of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their exponential function (base 10).
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Exp2InPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function (base 2) of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their exponential function (base 2).
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ExpInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their exponential function.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ExpM1InPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their exponential function.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Find">
      <summary>
            Gets the linearized indexes of the elements
            of the tensor that are not zero.
            </summary>
      <returns>An integer array that contains the linearized
            indexes of the elements of this tensor that 
            are not zero.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Find(System.Func{`0,System.Boolean})">
      <summary>
            Gets the linearized indexes where the elements
            of the tensor satisfy the specified predicate.
            </summary>
      <param name="predicate">The predicate to apply
            to the elements of the tensor.</param>
      <returns>An integer array that contains the linearized
            indexes of the elements of this tensor that 
            satisfy <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="predicate" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.FlattenedLength">
      <summary>
            Gets the total number of elements in the tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.FloorInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest integer that is not less than the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their rounded down value.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetDiagonal(System.Int32)">
      <summary>
            Gets the elements on the diagonal of a 2-dimensional tensor.
            </summary>
      <param name="diagonal">Optional. The diagonal to return.
            The default value 0 indicates the main diagonal.
            Values greater than zero indicate diagonals above the main diagonal.
            Values less than zero indicate diagonals above the main diagonal.
            </param>
      <returns>A tensor of the same element type
            that contains the elements on the diagonal specified by
            <paramref name="diagonal" />.</returns>
      <exception cref="T:System.RankException">
        <para>The tensor does not have rank 2.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetEnumerator">
      <summary>
            Gets an enumerator for the tensor.
            </summary>
      <returns>An object that enumerates over the elements
            of the tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetHashCode">
      <summary>
            Returns the hash code for this tensor.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetLength(System.Int32)">
      <summary>
            Gets the length of the tensor along the specified axis.
            </summary>
      <param name="axis">The zero based index of the axis.</param>
      <returns>The length of the tensor in the dimension specified
            by <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetMatrices">
      <summary>
            Gets a sequence of the matrices formed by the last two dimensions of the tensor.
            </summary>
      <returns>A sequence of matrices.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.Int32)">
      <summary>
            Gets the value at the specified index in a 1D tensor.
            </summary>
      <param name="index">The position of the element.</param>
      <returns>The element at position <paramref name="index" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.Int32,System.Int32)">
      <summary>
            Gets the value at the specified position in a 2D tensor.
            </summary>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
      <returns>The element with indices <paramref name="index1" />
            and <paramref name="index2" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the value at the specified position in a 2D tensor.
            </summary>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
      <param name="index3">The position of the element in the third dimension.</param>
      <returns>The element with indices <paramref name="index1" />,
            <paramref name="index2" />, and <paramref name="index3" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the value at the specified position in a 4D tensor.
            </summary>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
      <param name="index3">The position of the element in the third dimension.</param>
      <param name="index4">The position of the element in the fourth dimension.</param>
      <returns>The element with indices <paramref name="index1" />,
            <paramref name="index2" />, <paramref name="index3" />,
            and <paramref name="index4" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.Int32[])">
      <summary>
            Gets the element at the specified position.
            </summary>
      <param name="indexes">An array of zero-based indexes of the element.</param>
      <returns>The element in the position specified by
            <paramref name="indexes" />.</returns>
      <remarks>
        <para>This method does not perform bounds checking. It is provided
            for optimized access in situations where the argument is known to be
            within bounds. If the argument is outside its valid range, the result
            is unspecified.
            </para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The length of <paramref name="indexes" /> is 
            not equal to the rank of the tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValue(System.ReadOnlySpan{System.Int32})">
      <summary>
            Gets the element at the specified position.
            </summary>
      <param name="indexes">A read-only span of zero-based indexes of the element.</param>
      <returns>The element in the position specified by
            <paramref name="indexes" />.</returns>
      <remarks>
        <para>This method does not perform bounds checking. It is provided
            for optimized access in situations where the argument is known to be
            within bounds. If the argument is outside its valid range, the result
            is unspecified.
            </para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The length of <paramref name="indexes" /> is 
            not equal to the rank of the tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.GetValueAt(System.Int32)">
      <summary>
            Gets the element at the specified position.
            </summary>
      <param name="linearIndex">The zero-based index of the element.</param>
      <returns>The element in the
            <paramref name="linearIndex" />th position.</returns>
      <remarks>
        <para>This method does not perform bounds checking. It is provided
            for optimized access in situations where the argument is known to be
            within bounds. If the argument is outside its valid range, the result
            is unspecified.
            </para>
      </remarks>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.HasLinearAlgebra">
      <summary>
            Gets whether the tensor's element type supports basic linear algebra operations.
            </summary>
      <remarks>
        <para>Basic linear algebra operations on vectors and matrices 
            (i.e. one and two-dimensional tensors) are often highly optimized.
            For this reason, when a tensor operation can be expressed in terms
            of such operations, it is preferred for performance reasons.
            </para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.HypotInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the sum of the squares of the elements of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the hypotenuse of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.HypotInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the sum of the squares of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            hypotenuse of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.InsertAxis(System.Int32)">
      <summary>
            Inserts a singleton dimension at the specified position.
            </summary>
      <param name="axis">The axis where the dimension should be inserted.</param>
      <returns>A new tensor that holds the same data but has a singleton dimension
            inserted at <paramref name="axis" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.IsCompressed">
      <summary>
            Gets whether the elements of the tensor are compressed along a dimension.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.IsContiguous">
      <summary>
            Gets whether the elements of the tensor are stored contiguously.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.IsCStyle">
      <summary>
            Gets whether the elements of the tensor are stored in 
            contiguous C-style order, with the last index changing fastest.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.IsFortranStyle">
      <summary>
            Gets whether the elements of the tensor are stored in 
            contiguous Fortran-style order, with the first index changing fastest.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.IsScalar">
      <summary>
            Gets whether the tensor represents a scalar.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.AdvancedTensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            an 'advanced' tensor index.
            </summary>
      <param name="index">An index that can be implicitly
            converted to an <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" />.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.AdvancedTensorIndex,Numerics.NET.Tensors.AdvancedTensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            two 'advanced' tensor indices.
            </summary>
      <param name="index1">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" /> for the first dimension.</param>
      <param name="index2">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" /> for the second dimension.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index1" />
            and <paramref name="index2" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.AdvancedTensorIndex,Numerics.NET.Tensors.AdvancedTensorIndex,Numerics.NET.Tensors.AdvancedTensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            three 'advanced' tensor indices.
            </summary>
      <param name="index1">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" /> for the first dimension.</param>
      <param name="index2">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" /> for the second dimension.</param>
      <param name="index3">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.AdvancedTensorIndex" /> for the second dimension.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index1" />, <paramref name="index2" />,
            and <paramref name="index3" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.AdvancedTensorIndex[])">
      <summary>
            Gets or sets the elements of a tensor specified by
            a set of tensor indices.
            </summary>
      <param name="indices">A parameter array of
            tensor indices.</param>
      <returns>A tensor of the same element type
            that contains the elements from each dimension
            specified by <paramref name="indices" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Gets or sets the elements whose corresponding value in a
            boolean tensor is <see langword="true" />.
            </summary>
      <param name="mask">A boolean tensor of dimension compatible
            with this instance.</param>
      <returns>A 1-dimensional tensor containing the elements
            whose corresponding value in <paramref name="mask" />
            is <see langword="true" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.TensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            a tensor index.
            </summary>
      <param name="index">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.TensorIndex,Numerics.NET.Tensors.TensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            two tensor indices.
            </summary>
      <param name="index1">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> for the first dimension.</param>
      <param name="index2">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> for the second dimension.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index1" />
            and <paramref name="index2" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.TensorIndex,Numerics.NET.Tensors.TensorIndex,Numerics.NET.Tensors.TensorIndex)">
      <summary>
            Gets or sets the elements of a tensor specified by
            three tensor indices.
            </summary>
      <param name="index1">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> for the first dimension.</param>
      <param name="index2">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> for the second dimension.</param>
      <param name="index3">An index that can be implicitly
            converted to a <see cref="T:Numerics.NET.Tensors.TensorIndex" /> for the third dimension.</param>
      <returns>A tensor of the same element type
            that contains the elements
            specified by <paramref name="index1" />, <paramref name="index2" />,
            and <paramref name="index3" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(Numerics.NET.Tensors.TensorIndex[])">
      <summary>
            Gets or sets the elements of a tensor specified by
            a set of tensor indices.
            </summary>
      <param name="indices">A parameter array of
            tensor indices.</param>
      <returns>A tensor of the same element type
            that contains the elements from each dimension
            specified by <paramref name="indices" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Item(System.ReadOnlySpan{Numerics.NET.Tensors.TensorIndex})">
      <summary>
            Gets or sets the elements of a tensor specified by
            a set of tensor indices.
            </summary>
      <param name="indices">A read-only span of tensor indices.</param>
      <returns>A tensor of the same element type
            that contains the elements from each dimension
            specified by <paramref name="indices" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Layout">
      <summary>
            Gets the layout of the tensor in memory.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.LeftShiftInPlace(Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the left in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the shift of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.LeftShiftInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the left. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            shift of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Log10InPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the base 10 logarithm of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their base 10 logarithm.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Log1pInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their logarithm.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Log2InPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the base 2 logarithm of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their base 2 logarithm.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.LogInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their logarithm.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.LogInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in the base specified by another tensor in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the logarithm of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.LogInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor to base a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            logarithm of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Map``1(System.Func{`0,``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies a function to the elements of the tensor
            and returns the result in a second tensor.
            </summary>
      <param name="function">A delegate that represents a function of two variables</param>
      <param name="result">The tensor that is to hold the result. May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of the current tensor.</param>
      <returns>A tensor whose elements are the result of applying <paramref name="function" />
            to each element of the tensor.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MapInPlace(System.Func{`0,`0})">
      <summary>
            Applies a function to the elements of a tensor in-place.
            </summary>
      <param name="function">A delegate that represents a function 
            of one variable.</param>
      <returns>The tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MaxInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest of corresponding elements of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the maximum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MaxInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            maximum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MaxNumberInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest of corresponding elements of two tensors without propagating NaN's (where applicable) in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the maximum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MaxNumberInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            maximum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MinInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest of corresponding elements of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the minimum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MinInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            minimum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MinNumberInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest of corresponding elements of two tensors without propagating NaN's (where applicable) in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the minimum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MinNumberInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            minimum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ModulusInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns the remainder after dividing one tensor by another in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the modulus of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ModulusInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the remainder after dividing a tensor by a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            modulus of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MoveAxes(System.Int32[])">
      <summary>
            Moves a set of axes to new positions in a tensor.
            </summary>
      <param name="axes">An array containing the desired new positions of the axes.</param>
      <returns>A view of the tensor with the axes moved to the positions 
            specified in <paramref name="axes" />.
            </returns>
      <remarks>
        <para>Negative values indicate the axis should be counted from the end.</para>
        <para>The source and destination axes must each be unique.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>The axes specified by <paramref name="axes" /> are not all unique.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MoveAxes(System.Int32[],System.Int32[])">
      <summary>
            Moves a set of axes to new positions in a tensor.
            </summary>
      <param name="source">An array containing the axes to move.</param>
      <param name="destination">An array containing the desired new positions of the axes.</param>
      <returns>A view of the tensor with axes in <paramref name="source" /> 
            moved to the corresponding positions in <paramref name="destination" />.
            </returns>
      <remarks>
        <para>Negative values indicate the axis should be counted from the end.</para>
        <para>The source and destination axes must each be unique.</para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>
          <paramref name="source" /> and <paramref name="destination" /> do not have
            the same length.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The axes specified by <paramref name="source" /> are not all unique.</para>
        <para>-or-</para>
        <para>The axes specified by <paramref name="destination" /> are not all unique.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MoveAxes(System.ReadOnlySpan{System.Int32})">
      <summary>
            Moves a set of axes to new positions in a tensor.
            </summary>
      <param name="axes">A read-only span containing the desired new positions of the axes.</param>
      <returns>A view of the tensor with the axes moved to the positions 
            specified in <paramref name="axes" />.
            </returns>
      <remarks>
        <para>Negative values indicate the axis should be counted from the end.</para>
        <para>The source and destination axes must each be unique.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>The axes specified by <paramref name="axes" /> are not all unique.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MoveAxes(System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
      <summary>
            Moves a set of axes to new positions in a tensor.
            </summary>
      <param name="source">A read-only span containing the axes to move.</param>
      <param name="destination">A read-only span containing the desired new positions of the axes.</param>
      <returns>A view of the tensor with axes in <paramref name="source" /> 
            moved to the corresponding positions in <paramref name="destination" />.
            </returns>
      <remarks>
        <para>Negative values indicate the axis should be counted from the end.</para>
        <para>The source and destination axes must each be unique.</para>
      </remarks>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>
          <paramref name="source" /> and <paramref name="destination" /> do not have
            the same length.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The axes specified by <paramref name="source" /> are not all unique.</para>
        <para>-or-</para>
        <para>The axes specified by <paramref name="destination" /> are not all unique.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MoveAxis(System.Int32,System.Int32)">
      <summary>
            Moves an axis to a new position in a tensor.
            </summary>
      <param name="source">The axis to move.</param>
      <param name="destination">The desired new position of the axis.</param>
      <returns>A view of the tensor with axis <paramref name="source" /> 
            moved to position <paramref name="destination" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MultiplyInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Multiplies two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the product of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MultiplyInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Multiplies a tensor and a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            product of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.MultiplySumInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds two tensors and multiplies the result elementwise by a third in place.
            </summary>
      <param name="left">A tensor whose elements serve as the second operand.</param>
      <param name="right">A tensor whose elements serve as the third operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the result of the element and the corresponding
            elements of <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.NaN">
      <summary>
            A read-only scalar tensor that represents Not-a-Number.
            </summary>
      <remarks>
        <para>The actual value is undefined if the element type
            does not support Not-a-Number.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.NegateInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Negates a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their negation.
            </returns>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.NegativeInfinity">
      <summary>
            A read-only scalar tensor that represents negative infinity.
            </summary>
      <remarks>
        <para>The actual value is undefined if the element type
            does not support infinities.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.NotInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise complement of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their bitwise complement.
            </returns>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.One">
      <summary>
            A read-only scalar tensor that represents the number one.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Addition(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Adds two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Addition(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Adds a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Addition(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Adds a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_AdditionAssignment(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Adds another matrix to a matrix in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="term">The matrix to add to <paramref name="self" />.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_AdditionAssignment(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Adds a constant to a matrix in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="term">A real number.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseAnd(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise and of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseAnd(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Computes the bitwise and of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseAnd(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise and of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseOr(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise or of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseOr(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Computes the bitwise or of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_BitwiseOr(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise or of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Division(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Divides one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Division(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Divides a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Division(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Divides a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the quotient
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_DivisionAssignment(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Divides a matrix by a constant in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="factor">A real number.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Equality(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Determines whether two tensors are equal.
            </summary>
      <param name="left">The first tensor to compare, or <see langword="null" />.</param>
      <param name="right">The second tensor to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" />
            have the same shape and elements; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Equality(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Compares a tensor and a scalar for equality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Equality(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Compares a scalar and a tensor for equality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_ExclusiveOr(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise xor of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_ExclusiveOr(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Computes the bitwise xor of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_ExclusiveOr(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise xor of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Explicit(Numerics.NET.Tensors.Tensor{`0})~`0">
      <summary>
            Converts a scalar (0-dimensional) tensor to 
            the corresponding scalar value.
            </summary>
      <param name="value">The tensor to convert.</param>
      <exception cref="T:System.InvalidCastException">
        <para>
          <paramref name="value" /> does not have
            exactly one element.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Explicit(`0)~Numerics.NET.Tensors.Tensor{`0}">
      <summary>
            Implicitly converts a scalar value to a
            0-dimensional scalar tensor.
            </summary>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Explicit(`0[0:,0:,0:])~Numerics.NET.Tensors.Tensor{`0}">
      <summary>
            Implicitly converts an array to a
            3-dimensional scalar tensor.
            </summary>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Explicit(`0[0:,0:])~Numerics.NET.Tensors.Tensor{`0}">
      <summary>
            Implicitly converts an array to a
            2-dimensional scalar tensor.
            </summary>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Explicit(`0[])~Numerics.NET.Tensors.Tensor{`0}">
      <summary>
            Implicitly converts an array to a
            1-dimensional scalar tensor.
            </summary>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Int32})">
      <summary>
            Raises the elements of a tensor to an integer power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Raises the elements of a tensor to a power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(Numerics.NET.Tensors.Tensor{`0},System.Int32)">
      <summary>
            Raises the elements of a tensor to an integer power.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Raises the elements of a tensor to a power.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(`0,Numerics.NET.Tensors.Tensor{System.Int32})">
      <summary>
            Raises a scalar to an integer power.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Exponentiation(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Raises a scalar to a power.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThan(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether the elements of one tensor are greater than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThan(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Returns whether the elements of a tensor are greater than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThan(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether a scalar are greater than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThanOrEqual(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThanOrEqual(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Returns whether the elements of a tensor are greater than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_GreaterThanOrEqual(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether a scalar are greater than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Inequality(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Determines whether two tensors are not equal.
            </summary>
      <param name="left">The first tensor to compare, or <see langword="null" />.</param>
      <param name="right">The second tensor to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" />
            have a different shape or different elements; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Inequality(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Compares a tensor and a scalar for inequality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Inequality(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Compares a scalar and a tensor for inequality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LeftShift(Numerics.NET.Tensors.Tensor{`0},System.Int32)">
      <summary>
            Shifts the elements of a tensor to the left..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThan(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether the elements of one tensor are less than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThan(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Returns whether the elements of a tensor are less than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThan(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether a scalar are less than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThanOrEqual(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThanOrEqual(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Returns whether the elements of a tensor are less than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_LessThanOrEqual(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns whether a scalar are less than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Modulus(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Returns the remainder after dividing one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Modulus(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Computes the remainder after dividing a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Modulus(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the remainder after dividing a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the modulus
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Multiply(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Multiplies two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Multiply(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Multiplies a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Multiply(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Multiplies a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the product
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_MultiplyAssignment(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Multiplies a matrix by a constant in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="factor">A real number.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_OnesComplement(Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Computes the bitwise complement of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <returns>A tensor of the same shape as
            <paramref name="value" />
            whose elements are equal to the bitwise complement
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_RightShift(Numerics.NET.Tensors.Tensor{`0},System.Int32)">
      <summary>
            Shifts the elements of a tensor to the right..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Subtraction(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Subtracts one tensor from another.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Subtraction(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Subtracts a scalar from a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_Subtraction(`0,Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Subtracts a tensor from a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the difference
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_SubtractionAssignment(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Subtracts another matrix from a matrix in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="term">The <see cref="T:Numerics.NET.Tensors.Tensor`1" /> to subtract from <paramref name="self" />.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_SubtractionAssignment(Numerics.NET.Tensors.Tensor{`0},`0)">
      <summary>
            Subtracts a constant from a matrix in place.
            </summary>
      <param name="self">A <see cref="T:Numerics.NET.Tensors.Tensor`1" />.</param>
      <param name="term">A real number.</param>
      <returns>A reference to <paramref name="self" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.op_UnaryNegation(Numerics.NET.Tensors.Tensor{`0})">
      <summary>
            Negates a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <returns>A tensor of the same shape as
            <paramref name="value" />
            whose elements are equal to the negation
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.OrInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise or of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.OrInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise or of a tensor and a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.PositiveInfinity">
      <summary>
            A read-only scalar tensor that represents positive infinity.
            </summary>
      <remarks>
        <para>The actual value is undefined if the element type
            does not support infinities.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.PowInPlace(Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to an integer power in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the power of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.PowInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to a power in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the power of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.PowInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to an integer power. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            power of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.PowInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to a power. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            power of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Precedence">
      <summary>
            Infrastructure. This property supports the Numerics.NET 
            infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Rank">
      <summary>
            Gets the number of dimensions of the tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ReciprocalInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the reciprocal of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their reciprocal.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RemoveSingletonAxis(System.Int32)">
      <summary>
            Returns a tensor with the same values but with
            the specified unit dimension removed.
            </summary>
      <param name="axis">The dimension to remove.</param>
      <returns></returns>
      <exception cref="T:System.InvalidOperationException">
        <para>The size of the tensor along dimension
            <paramref name="axis" /> is not one.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Reshape(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Reshapes the tensor to have the specified dimensions.
            </summary>
      <param name="shape">The shape of the new tensor.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in C-style (row-major) order.</param>
      <returns>A tensor that has the same values as this tensor
            but with dimensions specified by 
            <paramref name="shape" />.</returns>
      <remarks>
        <para>When reshaping a tensor the number of elements 
            must remain the same.</para>
        <para>One of the dimensions in <paramref name="shape" />
            may have the value -1. In this case, the dimension is
            inferred from the current shape and the other dimensions.
            Only one dimension can be left unspecified.
            </para>
        <para>Whenever possible, elements are not copied and
            a view is returned.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>More than one dimension in <paramref name="shape" />
            was left unspecified.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The number of elements in <paramref name="shape" /> 
            does not equal the number of elements in this shape.</para>
        <para>-or-</para>
        <para>One dimension was left unspecified in 
            <paramref name="shape" /> and the number of
            elements in the remaining dimensions does not divide
            the number of elements in this shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Reshape(System.Int32[])">
      <summary>
            Reshapes the tensor to have the specified dimensions.
            </summary>
      <param name="dimensions"></param>
      <returns>A tensor that has the same values as this tensor
            but with dimensions specified by <paramref name="dimensions" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="dimensions" /> is null.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>When reshaping a tensor the number of elements must remain the same.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RightShiftInPlace(Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the right in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the shift of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RightShiftInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the right. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            shift of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RootNInPlace(Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the n-th root of the elements of a tensor in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the root of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RootNInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the n-th root of a the elements of a tensor in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            root of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RoundInPlace(Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Rounds the elements of a tensor to the specified number of digits in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the round of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.RoundInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Rounds the elements of a tensor to the specified number of digits. in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            round of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Sets all elements of the tensor to the specified value.
            </summary>
      <param name="value">The new value for the elements of the tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the value at the location should be set to <paramref name="value" />.
            If omitted, all elements of the tensor are set.</param>
      <returns>This tensor with the selected elements replaced with
            <paramref name="value" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.Int32)">
      <summary>
            Sets the value at the specified index in a 1D tensor.
            </summary>
      <param name="value">The new value for the element.</param>
      <param name="index">The position of the element.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.Int32,System.Int32)">
      <summary>
            Sets the value at the specified position in a 2D tensor.
            </summary>
      <param name="value">The new value for the element.</param>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the value at the specified position in a 3D tensor.
            </summary>
      <param name="value">The new value for the element.</param>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
      <param name="index3">The position of the element in the second dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the value at the specified position in a 4D tensor.
            </summary>
      <param name="value">The new value for the element.</param>
      <param name="index1">The position of the element in the first dimension.</param>
      <param name="index2">The position of the element in the second dimension.</param>
      <param name="index3">The position of the element in the second dimension.</param>
      <param name="index4">The position of the element in the second dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.Int32[])">
      <summary>
            Sets the element at the specified position to the specified value.
            </summary>
      <param name="indexes">The zero-based index of the element.</param>
      <param name="value">The new value of the element.</param>
      <returns>The element in the
            <paramref name="indexes" />th position.</returns>
      <remarks>
        <para>This method does not perform bounds checking. It is provided
            for optimized access in situations where the argument is known to be
            within bounds. If the argument is outside its valid range, the result
            may be unpredictable.
            </para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValue(`0,System.ReadOnlySpan{System.Int32})">
      <summary>
            Sets the element at the specified position to the specified value.
            </summary>
      <param name="indexes">The zero-based index of the element.</param>
      <param name="value">The new value of the element.</param>
      <returns>The element in the
            <paramref name="indexes" />th position.</returns>
      <remarks>
        <para>This method does not perform bounds checking. It is provided
            for optimized access in situations where the argument is known to be
            within bounds. If the argument is outside its valid range, the result
            may be unpredictable.
            </para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SetValueAt(`0,System.Int32)">
      <summary>
            Sets the element at the specified linear position 
            to the specified value.
            </summary>
      <param name="linearIndex">The zero-based index of the element.</param>
      <param name="value">The new value of the element.</param>
      <returns>The element in the
            <paramref name="linearIndex" />th position.</returns>
      <remarks>
        <para>This method does not perform bounds checking. 
            It is provided for optimized access in situations where 
            the argument is known to be within bounds. If the argument
            is outside its valid range, the result may be unpredictable
            or an exception may be thrown.
            </para>
        <para>This method takes a linearized index, from 0 to 
            the number of elements in the tensor.</para>
      </remarks>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Shape">
      <summary>
            Gets the shape (dimensions) of the tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SinhInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic sine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their hyperbolic sine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SinInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the sine of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their sine.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SortInPlace(System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Sorts the elements of a tensor in place.
            </summary>
      <param name="axis">The axis along which the operation is to be performed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their sorted along the dimension <paramref name="axis" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SortInPlace(System.Int32,System.Collections.Generic.IComparer{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Sorts the elements of a tensor in place.
            </summary>
      <param name="axis">The axis along which the operation is to be performed.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use 
            when comparing elements, or null to use <see cref="P:Numerics.NET.Operations`1.Comparer" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their sorted along the dimension <paramref name="axis" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SqrtInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their square root.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SubtractInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Subtracts one tensor from another in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the difference of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SubtractInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Subtracts a scalar from a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            difference of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.SwapAxes(System.Int32,System.Int32)">
      <summary>
            Interchanges two axes of the tensor.
            </summary>
      <param name="axis1">The zero-based index of the first axis.</param>
      <param name="axis2">The zero-based index of the second axis.</param>
      <returns>A view of the tensor with axes 
            <paramref name="axis1" /> and <paramref name="axis2" />
            swapped.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.TanhInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic tangent of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their hyperbolic tangent.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.TanInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the tangent of the elements of a tensor in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their tangent.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ToArray(Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Gets the elements of the tensor as an array in the specified order.
            </summary>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are listed in C-style (row-major) order.</param>
      <returns>An array that contains a copy of the elements of the tensor
            in the order specified by <paramref name="order" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ToString(System.String)">
      <summary>
            Converts the numeric value of this tensor instance
            to its equivalent string representation, using the
            specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>A <see cref="T:System.String" /> representation of this instance.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> representation of this tensor.
            </summary>
      <param name="format">A <see cref="T:System.String" /> specifying the format to use.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.</param>
      <returns>A <see cref="T:System.String" /> representation of this instance.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Transform``1(System.Func{`0,``0})">
      <summary>
            Returns a tensor that lazily applies the specified operation to each element 
            of the current tensor.
            </summary>
      <param name="transform">A function that performs the transformation.</param>
      <typeparam name="TResult">The type of the result of the transformation.</typeparam>
      <returns>A tensor that results from applying <paramref name="transform" />
            to each element of this tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Transform``2(``0)">
      <summary>
            Returns a tensor that lazily applies the specified operation to each element 
            of the current tensor.
            </summary>
      <param name="transform">A 'fast' function that performs the transformation.</param>
      <typeparam name="TResult">The type of the return value of <paramref name="transform" />.</typeparam>
      <typeparam name="TTransformation">The type of <paramref name="transform" />.</typeparam>
      <returns>A tensor that results from applying <paramref name="transform" />
            to each element of this tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.Transpose">
      <summary>
            Swaps the last two dimensions of the tensor and returns
            the result.
            </summary>
      <returns></returns>
      <remarks>
        <para>For tensors of rank 0 or 1, the original tensor
            is returned. For tensors of rank 2, this method returns
            the matrix transpose. For tensors of rank higher than 2,
            the last two dimensions are swapped.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.TruncateInPlace(Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Truncates the elements of a tensor to the nearest integer in place.
            </summary>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their truncated value.
            </returns>
    </member>
    <member name="P:Numerics.NET.Tensors.Tensor`1.Value">
      <summary>
            Gets the value of the first element in the tensor.
            </summary>
      <remarks>
        <para>This method is useful primarily for
            0-dimensional tensors. If the tensor has no elements
            (one of the dimensions is 0), then the behaviour is
            undefined.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.XorInPlace(Numerics.NET.Tensors.Tensor{`0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise xor of two tensors in place.
            </summary>
      <param name="other">A tensor whose elements serve as the second operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="other" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="other" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="other" /> are not
            compatible with the dimensions of this tensor.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.Tensor`1.XorInPlace(`0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise xor of a tensor and a scalar in-place.
            </summary>
      <param name="other">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="other" />.
            </returns>
    </member>
    <member name="F:Numerics.NET.Tensors.Tensor`1.Zero">
      <summary>
            A read-only scalar tensor that represents the number zero.
            </summary>
    </member>
    <member name="T:Numerics.NET.Tensors.TensorBackEnd">
      <summary>
            Represents a back end for tensor operations.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Numerics.NET.Tensors.TensorBackEnd</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Abs``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the absolute value of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the absolute value
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the absolute value of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their absolute value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMax``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the element with largest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with largest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMax``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with largest absolute value of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMaxIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the element with the largest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the element with the largest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the element with the largest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the element with smallest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with smallest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the element with smallest absolute value of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AbsoluteMinIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the element with the smallest absolute value of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the element with the smallest absolute value is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the element with the smallest absolute value of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Acos``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse cosine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Acosh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic cosine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AcoshInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic cosine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic cosine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AcosInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse cosine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse cosine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Add``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Add``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Add``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AddInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AddInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds a tensor and a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AddProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds a tensor to the elementwise product of two tensors.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the result
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AddProductInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds a tensor to the elementwise product of two tensors in place.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the result of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.All(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether all elements of a boolean tensor 
            along the specified axis are <see langword="true" />.
            </summary>
      <param name="operand">A boolean tensor.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether all elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> are true.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.All(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether all elements of a boolean tensor are <see langword="true" />.
            </summary>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if all elements that satisfy <paramref name="mask" />
            are <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.All``2(``1,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether all elements of a boolean tensor 
            along the specified axis satisfy a predicate.
            </summary>
      <param name="operand">A tensor.</param>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the evaluation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether all elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> also satisfy <paramref name="predicate" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.All``2(``1,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Returns whether all elements of a boolean tensor satisfy a predicate.
            </summary>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the evaluation. The default is <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if all elements that satisfy <paramref name="mask" />
            also satisfy <paramref name="predicate" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.All``3(``2,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether all elements of a pair of tensors satisfy a predicate.
            </summary>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="tensor1">The tensor that contains the first arguments of the predicate.</param>
      <param name="tensor2">The tensor that contains the second arguments of the predicate.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if all elements that satisfy <paramref name="mask" />
            also satisfy <paramref name="predicate" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.And``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.And``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.And``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise and of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AndInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise and of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AndInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise and of a tensor and a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Any(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether any elements of a boolean tensor 
            along the specified axis are <see langword="true" />.
            </summary>
      <param name="operand">A boolean tensor.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether any elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> are true.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Any(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether any elements of a boolean tensor are <see langword="true" />.
            </summary>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if any elements that satisfy <paramref name="mask" />
            are <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Any``2(``1,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes whether any elements of a tensor 
            along the specified axis satisfy a predicate.
            </summary>
      <param name="operand">A boolean tensor.</param>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="axis">The axis along which to sum the elements. The default is 0.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the evaluation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <returns>A tensor containing a value that indicates whether any elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" /> also satisfy <paramref name="predicate" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Any``2(``1,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Returns whether any elements of a tensor satisfy a predicate.
            </summary>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="operand">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            any elements are included.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the evaluation. The default is <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if any elements that satisfy <paramref name="mask" />
            also satisfy <paramref name="predicate" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Any``3(``2,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``1},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns whether any elements of a pair of tensors satisfy a predicate.
            </summary>
      <param name="predicate">The predicate that the elements must satisfy.</param>
      <param name="tensor1">The tensor that contains the elements to check.</param>
      <param name="tensor2">The tensor that contains the elements to check.</param>
      <param name="mask">Optional. A boolean that specifies which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            all elements are included.</param>
      <returns>
        <see langword="true" /> if any elements that satisfy <paramref name="mask" />
            also satisfy <paramref name="predicate" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Asin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse sine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Asinh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic sine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AsinhInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic sine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic sine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AsinInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse sine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse sine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan2``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the inverse tangent
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan2``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse tangent of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the inverse tangent
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan2InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the inverse tangent of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atan2InPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            inverse tangent of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Atanh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the inverse hyperbolic tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the inverse hyperbolic tangent
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AtanhInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse hyperbolic tangent of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse hyperbolic tangent.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.AtanInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the inverse tangent of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their inverse tangent.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Cbrt``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cube root of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cube root
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CbrtInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cube root of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their cube root.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Ceiling``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest integer that is not greater than the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the rounded up value
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CeilingInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest integer that is not greater than the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their rounded up value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Clamp``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the values of a tensor clamped by the corresponding values of two other tensors.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the clamped value
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ClampInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the values of a tensor clamped by the corresponding values of two other tensors in place.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the clamped value of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Copy``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Copies the elements of one tensor to another, or to a new tensor.
            </summary>
      <param name="source">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="initializeToZero">Specifies if the elements of the result tensor
            for which <paramref name="mask" /> is <see langword="false" /> should be set to zero.
            The default is true.</param>
      <param name="order">Optional. The desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as <paramref name="source" />
            whose elements where <paramref name="mask" /> is <see langword="true" />
            are equal to the corresponding elements of 
            <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="source" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CopyTo``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Copies the elements of one tensor to another, or to a new tensor.
            </summary>
      <param name="source">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="destination" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="destination">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="source" />
            whose elements are equal to the corresponding elements of 
            <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="source" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>
          <paramref name="source" /> and <paramref name="mask" /> are not 
            jointly broadcastable to <paramref name="destination" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Correlation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the correlation of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the correlation of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the correlation of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Correlation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the correlation of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the correlation of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Cos``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cosine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Cosh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic cosine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic cosine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CoshInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic cosine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their hyperbolic cosine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CosineSimilarity``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cosine similarity of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the cosine similarity of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the cosine similarity of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CosineSimilarity``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the cosine similarity of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the cosine similarity of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CosInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cosine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their cosine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Covariance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the covariance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the covariance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the covariance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Covariance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the covariance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the covariance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Create``1(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Constructs a new tensor with the specified shape.
            </summary>
      <param name="shape">The <see cref="T:Numerics.NET.Tensors.TensorShape" /> of the new tensor.</param>
      <param name="order">Optional. The order in which elements
            are stored. The default is C-style.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A new dense tensor.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Create``1(System.Int32[])">
      <summary>
            Constructs a new 3D tensor with the specified dimensions.
            </summary>
      <param name="dimensions">An array containing the dimensions of the tensor.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A new dense tensor with elements stored in C-style order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="dimensions" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>One of the elements of <paramref name="dimensions" /> is less than zero.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CreateFromArray``1(``0[],Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorElementOrder,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="order">Optional. Specifies the order in which elements are stored
            in <paramref name="values" />.
            The default is C-style (row major).</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used to store the tensor's elements. The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CreateFromArray``1(``0[],Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorLayout,System.Boolean)">
      <summary>
            Constructs a new dense tensor of the specifed dimensions, 
            wrapping existing backing memory for the contents.
            </summary>
      <param name="values">A 1D array containing the elements of the tensor.</param>
      <param name="shape">The dimensions of the new tensor.</param>
      <param name="layout">The layout of the tensor elements.</param>
      <param name="createView">Optional. Specifies whether <paramref name="values" />
            should be used as storage for the tensor. The default is <see langword="false" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CumulativeProduct``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cumulative product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cumulative product
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CumulativeProductInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cumulative product of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their cumulative product along the dimension <paramref name="axis" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CumulativeSum``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the cumulative sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the cumulative sum
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.CumulativeSumInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the cumulative sum of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their cumulative sum along the dimension <paramref name="axis" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorBackEnd.Default">
      <summary>
            Gets the current default back end.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Divide``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Divide``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the quotient
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Divide``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Divides a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the quotient
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.DivideInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Divides one tensor by another in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the quotient of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.DivideInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Divides a tensor by a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            quotient of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.DotProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the dot product of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the dot product of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the dot product of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.DotProduct``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the dot product of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the dot product of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.EqualTo``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares two tensors elementwise for equality.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.EqualTo``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a tensor and a scalar for equality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.EqualTo``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a scalar and a tensor for equality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.EuclideanDistance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the Euclidean distance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="axis">The axis along which the Euclidean distance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the Euclidean distance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.EuclideanDistance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the Euclidean distance of the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The tensor that serves as the first operand.</param>
      <param name="tensor2">The tensor that serves as the second operand.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor containing the Euclidean distance of the elements of
            <paramref name="tensor1" /> and <paramref name="tensor2" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Exp``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Exp10``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function (base 10) of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function (base 10)
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Exp10InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function (base 10) of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their exponential function (base 10).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Exp2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function (base 2) of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function (base 2)
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Exp2InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function (base 2) of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their exponential function (base 2).
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ExpInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their exponential function.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ExpM1``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the exponential function of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the exponential function
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ExpM1InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the exponential function of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their exponential function.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Floor``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest integer that is not less than the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the rounded down value
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.FloorInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest integer that is not less than the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their rounded down value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are greater than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThan``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are greater than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThan``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are greater than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are greater than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.GreaterThanOrEqual``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are greater than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Hypot``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of the elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the hypotenuse
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Hypot``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the hypotenuse
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Hypot``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the sum of the squares of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the hypotenuse
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.HypotInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the sum of the squares of the elements of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the hypotenuse of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.HypotInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the sum of the squares of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            hypotenuse of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.If``1(Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Selects the elements of one of two tensors based on a condition.
            </summary>
      <param name="condition">A boolean tensor that specifies whether the
            corresponding element from <paramref name="trueValues" /> or
            <paramref name="falseValues" /> should be returned.</param>
      <param name="trueValues">A tensor that contains the values that
            should be returned if the corresponding element in <paramref name="mask" />
            is <see langword="true" />.</param>
      <param name="falseValues">A tensor that contains the values that
            should be returned if the corresponding element in <paramref name="mask" />
            is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors and the result.</typeparam>
      <returns>A tensor whose elements are taken from either <paramref name="trueValues" />
            or <paramref name="falseValues" />, depending on the corresponding element
            in <paramref name="mask" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="condition" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="trueValues" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="falseValues" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LeftShift``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the left.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LeftShift``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the left..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LeftShift``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts a scalar to the left..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the shift
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LeftShiftInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the left in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the shift of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LeftShiftInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the left. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            shift of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThan``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are less than a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThan``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are less than the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of one tensor are less than or equal to the corresponding elements of another tensor..
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThanOrEqual``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether the elements of a tensor are less than or equal to a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LessThanOrEqual``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns whether a scalar are less than or equal to the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor in the base specified by another tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor to base a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of a scalar to base the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the logarithm
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log10``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the base 10 logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the base 10 logarithm
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log10InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the base 10 logarithm of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their base 10 logarithm.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log1p``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the logarithm
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log1pInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their logarithm.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log2``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the base 2 logarithm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the base 2 logarithm
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Log2InPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the base 2 logarithm of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their base 2 logarithm.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LogInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their logarithm.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LogInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor in the base specified by another tensor in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the logarithm of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.LogInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the logarithm of the elements of a tensor to base a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            logarithm of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Max``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest of corresponding elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Max``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Max``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the maximum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the largest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the largest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest of corresponding elements of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the maximum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            maximum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxNumber``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest of corresponding elements of two tensors without propagating NaN's (where applicable).
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxNumber``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the maximum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxNumber``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the maximum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the maximum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxNumberInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the largest of corresponding elements of two tensors without propagating NaN's (where applicable) in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the maximum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxNumberInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the maximum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            maximum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the largest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the largest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MaxValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the largest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the largest element of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Mean``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the mean of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Mean``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Median``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the mean of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Median``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the mean of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the mean of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Min``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest of corresponding elements of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Min``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Min``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the minimum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinIndex``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{System.Int32},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the index of the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the index of the smallest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the index of the smallest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest of corresponding elements of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the minimum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            minimum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinNumber``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest of corresponding elements of two tensors without propagating NaN's (where applicable).
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinNumber``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the minimum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinNumber``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the minimum of a scalar and the elements of a tensor..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the minimum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinNumberInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the smallest of corresponding elements of two tensors without propagating NaN's (where applicable) in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the minimum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinNumberInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the minimum of the elements of a tensor and a scalar. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            minimum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the smallest element is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the smallest element of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MinValue``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the smallest element of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the smallest element of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Modulus``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Returns the remainder after dividing one tensor by another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Modulus``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the remainder after dividing a tensor by a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the modulus
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Modulus``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the remainder after dividing a scalar by a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the modulus
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ModulusInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Returns the remainder after dividing one tensor by another in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the modulus of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ModulusInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the remainder after dividing a tensor by a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            modulus of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Multiply``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Multiply``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the product
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Multiply``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Multiplies a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the product
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MultiplyInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Multiplies two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the product of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MultiplyInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Multiplies a tensor and a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            product of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MultiplySum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Adds two tensors and multiplies the result elementwise by a third.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the result
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.MultiplySumInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Adds two tensors and multiplies the result elementwise by a third in place.
            </summary>
      <param name="first">A tensor that serves as the first operand..</param>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the result of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="first" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorBackEnd.Name">
      <summary>
            Gets the name of the back end.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Negate``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Negates a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the negation
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.NegateInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Negates a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their negation.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Norm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the two-norm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the two-norm of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the two-norm of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Norm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the two-norm of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the two-norm of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Not``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise complement of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the bitwise complement
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.NotEqualTo``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares two tensors elementwise for inequality.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.NotEqualTo``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a tensor and a scalar for inequality..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the 
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.NotEqualTo``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Compares a scalar and a tensor for inequality..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the 
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.NotInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise complement of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their bitwise complement.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.OneNorm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sum of the absolute values of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the sum of the absolute values of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the absolute values of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.OneNorm``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the sum of the absolute values of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the absolute values of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Or``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Or``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Or``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise or of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.OrInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise or of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.OrInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise or of a tensor and a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Percentile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the percentiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentage">A value between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the percentiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Percentile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the quantile of the elements of a tensor.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentage">A value between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="type">Optional. The type of percentile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>The quantile of the elements of <paramref name="operand" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Percentiles``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IEnumerable{System.Double},Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the percentiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="percentages">A sequence of values between 0 and 100 that specifies the percentage
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to compute the percentiles.</param>
      <param name="type">Optional. The type of percentile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the percentiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to an integer power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to a power.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to an integer power..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises the elements of a tensor to a power..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the power
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises a scalar to an integer power..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Pow``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Raises a scalar to a power..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the power
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.PowInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to an integer power in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the power of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.PowInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to a power in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the power of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.PowInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to an integer power. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            power of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.PowInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Raises the elements of a tensor to a power. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            power of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Product``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the product of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the product of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Product``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the product of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the product of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Quantile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the quantiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probability">A value between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.
            </param>
      <param name="axis">The axis along which to reduce the elements.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the quantiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Quantile``1(Numerics.NET.Tensors.Tensor{``0},System.Double,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the quantile of the elements of a tensor.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probability">A value between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>The quantile of the elements of <paramref name="operand" /> 
            that satisfy <paramref name="mask" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Quantiles``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IEnumerable{System.Double},Numerics.NET.Axes,Numerics.NET.DataAnalysis.QuantileType,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the quantiles of the elements of a tensor
            along the specified axis.
            </summary>
      <param name="operand">The tensor that contains the elements to reduce.</param>
      <param name="probabilities">A sequence of values between 0 and 1 that specifies the fraction
            of values that is smaller than the quantile.</param>
      <param name="axis">The axis along which to compute the quantiles.</param>
      <param name="type">Optional. The type of quantile to compute.
            The type corresponds to the argument of the same type
            to the quantile function in R. The default is linear.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <param name="order">Optional. Specifies the element order of the result.
            By default, elements are stored in the order of <paramref name="operand" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the quantiles of the elements of 
            <paramref name="operand" /> that satisfy <paramref name="mask" />
            along <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Reciprocal``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the reciprocal of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the reciprocal
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.ReciprocalInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the reciprocal of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their reciprocal.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RightShift``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the right.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RightShift``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts the elements of a tensor to the right..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the shift
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RightShift``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Shifts a scalar to the right..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the shift
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RightShiftInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the right in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the shift of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RightShiftInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Shifts the elements of a tensor to the right. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            shift of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RootN``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of the elements of a tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the root
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RootN``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of a the elements of a tensor.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the root
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RootN``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the n-th root of a a scalar.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the root
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RootNInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the n-th root of the elements of a tensor in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the root of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RootNInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the n-th root of a the elements of a tensor in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            root of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Round``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds the elements of a tensor to the specified number of digits.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the round
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Round``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds the elements of a tensor to the specified number of digits..
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the round
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Round``1(``0,Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Rounds a scalar to the specified number of digits..
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the round
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RoundInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Int32},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Rounds the elements of a tensor to the specified number of digits in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the round of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.RoundInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Rounds the elements of a tensor to the specified number of digits. in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            round of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sin``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the sine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sinh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic sine of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic sine
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SinhInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic sine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their hyperbolic sine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SinInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the sine of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their sine.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SoftMax``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Applies the SoftMax function along the specified axis of a tensor.
            </summary>
      <param name="tensor">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the transformation. The default is <see langword="false" />.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="tensor" />
            whose elements are equal to the sorted
            of the corresponding elements of 
            <paramref name="tensor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sort``1(Numerics.NET.Tensors.Tensor{``0},System.Collections.Generic.IComparer{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Sorts the elements of a tensor.
            </summary>
      <param name="tensor">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use 
            when comparing elements, or null to use <see cref="P:Numerics.NET.Operations`1.Comparer" />.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="tensor" />
            whose elements are equal to the sorted
            of the corresponding elements of 
            <paramref name="tensor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sort``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Sorts the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the sorted
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SortInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Sorts the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the transformation is computed.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their sorted along the dimension <paramref name="axis" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SortInPlace``1(Numerics.NET.Tensors.Tensor{``0},System.Int32,System.Collections.Generic.IComparer{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Sorts the elements of a tensor in place.
            </summary>
      <param name="tensor">A tensor.</param>
      <param name="axis">The axis along which the operation is to be performed.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use 
            when comparing elements, or null to use <see cref="P:Numerics.NET.Operations`1.Comparer" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with the elements replaced with
            their sorted along the dimension <paramref name="axis" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sqrt``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the square root of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the square root
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SqrtInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the square root of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their square root.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorBackEnd.Standard">
      <summary>
            Gets the standard back end.
            </summary>
      <remarks>
        <para>The default back end only supports tensors on CPU.
            It is used when no other back end is specified.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.StandardDeviation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the standard deviation of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the standard deviation of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the standard deviation of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.StandardDeviation``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the standard deviation of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the standard deviation of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Subtract``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts one tensor from another.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Subtract``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts a scalar from a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the difference
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Subtract``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Subtracts a tensor from a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the difference
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SubtractInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Subtracts one tensor from another in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the difference of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.SubtractInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Subtracts a scalar from a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            difference of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the sum of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Sum``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the sum of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the sum of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Swap``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Swaps the corresponding elements of two tensors.
            </summary>
      <param name="tensor1">The first tensor.</param>
      <param name="tensor2">The second tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="tensor1" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="tensor2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Tan``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the tangent
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Tanh``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the hyperbolic tangent of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the hyperbolic tangent
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.TanhInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the hyperbolic tangent of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their hyperbolic tangent.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.TanInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the tangent of the elements of a tensor in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their tangent.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Truncate``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Truncates the elements of a tensor to the nearest integer.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="value" />
            whose elements are equal to the truncated value
            of the corresponding elements of 
            <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.TruncateInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Truncates the elements of a tensor to the nearest integer in place.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>This tensor with the elements replaced with
            their truncated value.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Variance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Axes,Numerics.NET.Tensors.Tensor{``0},System.Boolean,Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean,Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the variance of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="axis">The axis along which the variance of the elements is computed.</param>
      <param name="keepDimensions">Optional. Specifies whether 
            the reduced axis should be retained in the result.
            The default is <see langword="false" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the operation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the variance of the elements of
            <paramref name="value" /> 
            that satisfy <paramref name="mask" /> along the specified axis.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="value" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Variance``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},System.Boolean)">
      <summary>
            Computes the variance of the elements of a tensor.
            </summary>
      <param name="value">A tensor.</param>
      <param name="mask">Optional. A boolean that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="skipMissingValues">Optional. Specifies whether missing values should be 
            excluded from the aggregation. The default is <see langword="false" />.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor containing the variance of the elements of
            <paramref name="value" /> that satisfy <paramref name="mask" /> 
            along the specified axis.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Xor``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of two tensors.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            should be included in the operation. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>A tensor of the same shape as 
            <paramref name="left" /> and <paramref name="right" />
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Xor``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of a tensor and a scalar.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="left" /> 
            whose elements are equal to the sum
            of the corresponding elements of 
            <paramref name="left" /> and <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.Xor``1(``0,Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean},Numerics.NET.Tensors.TensorElementOrder)">
      <summary>
            Computes the bitwise xor of a scalar and a tensor.
            </summary>
      <param name="left">A scalar that serves as the left operand.</param>
      <param name="right">A tensor that serves as the right operand.</param>
      <param name="result">Optional. The tensor that is to hold the result.
            May be <see langword="null" />.</param>
      <param name="mask">Optional. A boolean tensor that specifies for which elements 
            the operation should be performed. If <see langword="null" /> (the default),
            the operation is applied everywhere.</param>
      <param name="order">Optional. If <paramref name="result" /> is <see langword="null" />,
            the desired ordering in memory of the result.</param>
      <typeparam name="T">The type of the elements of the tensor.</typeparam>
      <returns>A tensor of the same shape as
            <paramref name="right" />
            whose elements are equal to the sum
            of <paramref name="left" /> and the corresponding elements of 
            <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.XorInPlace``1(Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{``0},Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise xor of two tensors in place.
            </summary>
      <param name="left">A tensor that serves as the left operand..</param>
      <param name="right">A tensor that serves as the right operand..</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <typeparam name="T">The type of the elements of the tensors.</typeparam>
      <returns>This tensor with the elements replaced with
            the sum of the element and the corresponding
            element of <paramref name="right" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="left" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="right" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Numerics.NET.DimensionMismatchException">
        <para>The dimensions of <paramref name="left" /> and <paramref name="right" /> are not
            compatible.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorBackEnd.XorInPlace``1(Numerics.NET.Tensors.Tensor{``0},``0,Numerics.NET.Tensors.Tensor{System.Boolean})">
      <summary>
            Computes the bitwise xor of a tensor and a scalar in-place.
            </summary>
      <param name="left">A tensor that serves as the left operand.</param>
      <param name="right">A scalar that serves as the right operand.</param>
      <param name="mask">Optional. A boolean tensor that specifies whether
            the operation should be performed at the location.
            If omitted, the operation is performed everywhere.</param>
      <returns>This tensor with each element replaced with the
            sum of the element and <paramref name="right" />.
            </returns>
    </member>
    <member name="T:Numerics.NET.Tensors.TensorElementOrder">
      <summary>
            Enumerates the ways the elements of a tensor may be
            laid out in memory.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorElementOrder.Any">
      <summary>
            Indicates that when operating on a tensor, the result
            should keep the same element order as the tensor
            if it is in Fortran style order and storage is contiguous;
            otherwise C-style order should be used.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorElementOrder.Automatic">
      <summary>
            Indicates that when operating on one or more tensors,
            the optimal element order of the result should be determined
            automatically.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorElementOrder.CStyle">
      <summary>
            The elements are arranged so the last index changes
            the fastest. This is how multi-dimensional arrays
            in C/C# are laid out. For 2D arrays, this is also
            called row-major order.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorElementOrder.FortranStyle">
      <summary>
            The elements are arranged so the first index changes
            the fastest. This is how multi-dimensional arrays
            in Fortran are laid out. For 2D arrays, this is also
            called column-major order.
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorElementOrder.value__"></member>
    <member name="T:Numerics.NET.Tensors.TensorIndex">
      <summary>
            Represents a unified view of values that can serve
            as an index to a tensor.
            </summary>
      <remarks>
        <para>Values that can be used as an index include: integers,
            <see cref="T:Numerics.NET.Range" /> and <see cref="T:Numerics.NET.Slice" />.</para>
        <para>Mixing regular indexing with boolean indexing is not supported.</para>
      </remarks>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorIndex.All">
      <summary>
            Represents an index that spans the entire dimension.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorIndex.End">
      <summary>
            Gets the end index of the <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <remarks>
        <para>Negative values indicate that the index is counting down from the end.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.EndAt(System.Int32,System.Boolean)">
      <summary>
            Returns a new tensor index starting at the first element and ending at the specified index.
            </summary>
      <param name="end">The position of the first element 
            from which the tensor index will be created</param>
      <param name="fromEnd">Optional. Specifies whether <paramref name="end" />
            is from the start or the end. The default is <see langword="false" />.</param>
      <returns>A tensor index from the first element to <paramref name="end" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorIndex.IsSingleValue">
      <summary>
            Gets whether the index specifies a single value
            </summary>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorIndex.NewAxis">
      <summary>
            Represents an index that creates a new singleton dimension.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.op_Equality(Numerics.NET.Tensors.TensorIndex,Numerics.NET.Tensors.TensorIndex)">
      <summary>
            Compares two <see cref="T:Numerics.NET.Tensors.TensorIndex" /> instances for equality.
            </summary>
      <param name="left">The first <see cref="T:Numerics.NET.Tensors.TensorIndex" /> to compare.</param>
      <param name="right">The second <see cref="T:Numerics.NET.Tensors.TensorIndex" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> specify the same tensor index;
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.op_Implicit(Numerics.NET.Range)~Numerics.NET.Tensors.TensorIndex">
      <summary>
            Implicitly converts a <see cref="T:Numerics.NET.Range" /> to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <param name="range">A <see cref="T:Numerics.NET.Range" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.op_Implicit(Numerics.NET.Slice)~Numerics.NET.Tensors.TensorIndex">
      <summary>
            Implicitly converts a <see cref="T:Numerics.NET.Slice" /> to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <param name="slice">A <see cref="T:Numerics.NET.Slice" />.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.op_Implicit(System.Int32)~Numerics.NET.Tensors.TensorIndex">
      <summary>
            Implicitly converts an integer to a <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <param name="index">An integer index.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.op_Inequality(Numerics.NET.Tensors.TensorIndex,Numerics.NET.Tensors.TensorIndex)">
      <summary>
            Compares two <see cref="T:Numerics.NET.Tensors.TensorIndex" /> instances for inequality.
            </summary>
      <param name="left">The first <see cref="T:Numerics.NET.Tensors.TensorIndex" /> to compare.</param>
      <param name="right">The second <see cref="T:Numerics.NET.Tensors.TensorIndex" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> specify a different tensor index;
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorIndex.Start">
      <summary>
            Gets the start index of the <see cref="T:Numerics.NET.Tensors.TensorIndex" />.
            </summary>
      <remarks>
        <para>Negative values indicate that the index is counting down from the end.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorIndex.StartAt(System.Int32,System.Boolean)">
      <summary>
            Returns a new tensor index starting from a specified index to the end of the dimension.
            </summary>
      <param name="start">The position of the first element 
            from which the tensor index will be created</param>
      <param name="fromEnd">Optional. Specifies whether <paramref name="start" />
            is from the start or the end. The default is <see langword="false" />.</param>
      <returns>A tensor index from <paramref name="start" /> to the end of the dimension.</returns>
    </member>
    <member name="T:Numerics.NET.Tensors.TensorLayout">
      <summary>
            Represents the layout of a tensor in memory.
            </summary>
      <remarks>
        <para>Where a <see cref="T:Numerics.NET.Tensors.TensorShape" /> specifies the dimensions of a tensor,
            the <see cref="T:Numerics.NET.Tensors.TensorLayout" /> specifies how the elements of the tensor
            are laid out in memory.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.CStyle(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Returns a contiguous C-style layout for the specified shape.
            </summary>
      <param name="shape">The shape that specifies the dimensions.</param>
      <returns>A C-style tensor layout where the last index
            changes fastest.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.Equals(Numerics.NET.Tensors.TensorLayout)">
      <summary>
            Compares this layout to another layout.
            </summary>
      <param name="other">The layout to compare this layout to.</param>
      <returns>
        <see langword="true" /> if this layout and 
            <paramref name="other" /> have the same rank and
            the same strides; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.EqualsExcept(Numerics.NET.Tensors.TensorLayout,Numerics.NET.Axes)">
      <summary>
            Compares this layout to another layout, ignoring the specified axes.
            </summary>
      <param name="other">The layout to compare this layout to.</param>
      <param name="axes">The collection of axes to ignore.</param>
      <returns>
        <see langword="true" /> if this layout and 
            <paramref name="other" /> have the same rank and
            the same strides along the axes that are not contained in
            <paramref name="axes" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.FortranStyle(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Returns a contiguous Fortran-style layout for the specified shape.
            </summary>
      <param name="shape">The shape that specifies the dimensions.</param>
      <returns>A Fortran-style tensor layout where the last index
            changes fastest.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.FromStrides(System.Int32[])">
      <summary>
            Returns a tensor layout that uses the specified strides.
            </summary>
      <param name="strides">An integer array.</param>
      <returns>A tensor layout based on the specified strides.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.IsContiguousFor(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Gets whether this layout is contiguous for
            a tensor with the specified shape.
            </summary>
      <param name="shape">A tensor shape.</param>
      <returns>
        <see langword="true" /> if this layout
            is contiguous; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorLayout.Item(System.Int32)">
      <summary>
            Gets the stride along the specified axis.
            </summary>
      <param name="axis">The zero-based index of the axis.</param>
      <returns>The stride between values along the axis with index
            <paramref name="axis" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorLayout.Length">
      <summary>
            Gets the number of dimensions in the layout.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.LinearIndexToOffset(Numerics.NET.Tensors.TensorShape,System.Int32)">
      <summary>
            Converts the linear index in the specified shape
            to an offset.
            </summary>
      <param name="shape">The tensor shape of the linear index.</param>
      <param name="linearIndex">A linear index into <paramref name="shape" />.</param>
      <returns>The offset of the element with linear index
            <paramref name="linearIndex" /> within <paramref name="shape" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorLayout.Offset">
      <summary>
            Gets the linear offset of the first element in the tensor.
            </summary>
      <remarks>The offset may be non-zero when one or more of the strides is negative.</remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.op_Equality(Numerics.NET.Tensors.TensorLayout,Numerics.NET.Tensors.TensorLayout)">
      <summary>
            Compares two layouts for equality.
            </summary>
      <param name="left">The first layout to compare.</param>
      <param name="right">The second layout to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> have the same rank and
            the same strides; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.op_Inequality(Numerics.NET.Tensors.TensorLayout,Numerics.NET.Tensors.TensorLayout)">
      <summary>
            Compares two layouts for inequality.
            </summary>
      <param name="left">The first layout to compare.</param>
      <param name="right">The second layout to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> have a different rank or
            at least one dimension of a different size; 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorLayout.Scalar">
      <summary>
            Gets the tensor layout for a scalar.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.SwapAxes(System.Int32,System.Int32)">
      <summary>
            Returns a new layout that has the strides along the specified axes swapped.
            </summary>
      <param name="axis1">The index of the first axis.</param>
      <param name="axis2">The index of the second axis.</param>
      <returns>A new layout with the strides at <paramref name="axis1" />
            and <paramref name="axis2" /> swapped.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToIndices(System.Int32,System.Span{System.Int32})">
      <summary>
            Converts a linear index to a set of indexes
            for each dimension according to the layout.
            </summary>
      <param name="index">The linear index to convert.</param>
      <param name="indices">A span to hold the computed indices.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.Int32)">
      <summary>
            Converts a set of two integer indexes to a linear offset.
            </summary>
      <param name="index1">The first index.</param>
      <returns>The linear index corresponding to 
            <paramref name="index1" />.</returns>
      <remarks>
        <para>This method multiplies the index by the corresponding
            stride without any range checks.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.Int32,System.Int32)">
      <summary>
            Converts a set of two integer indexes to a linear offset.
            </summary>
      <param name="index1">The first index.</param>
      <param name="index2">The second index.</param>
      <returns>The linear index corresponding to 
            <paramref name="index1" /> and <paramref name="index2" />.</returns>
      <remarks>
        <para>This method multiplies the indexes by the corresponding
            strides and returns the sum without any range checks.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.Int32,System.Int32,System.Int32)">
      <summary>
            Converts a set of three integer indexes to a linear offset.
            </summary>
      <param name="index1">The first index.</param>
      <param name="index2">The second index.</param>
      <param name="index3">The third index.</param>
      <returns>The linear index corresponding to 
            <paramref name="index1" />, <paramref name="index2" />,
            and <paramref name="index3" />.</returns>
      <remarks>
        <para>This method multiplies the indexes by the corresponding
            strides and returns the sum without any range checks.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Converts a set of four integer indexes to a linear offset.
            </summary>
      <param name="index1">The first index.</param>
      <param name="index2">The second index.</param>
      <param name="index3">The third index.</param>
      <param name="index4">The fourth index.</param>
      <returns>The linear index corresponding to 
            <paramref name="index1" />, <paramref name="index2" />,
            <paramref name="index2" />, and <paramref name="index4" />.</returns>
      <remarks>
        <para>This method multiplies the indexes by the corresponding
            strides and returns the sum without any range checks.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.Int32[])">
      <summary>
            Converts a set of integer indexes to a linear offset.
            </summary>
      <param name="indexes">An array of indexes.</param>
      <returns>The linear index corresponding to <paramref name="indexes" />.</returns>
      <remarks>
        <para>This method multiplies the indexes by the corresponding
            strides and returns the sum without any range checks.</para>
      </remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorLayout.ToOffset(System.ReadOnlySpan{System.Int32})">
      <summary>
            Converts a set of integer indexes to a linear offset.
            </summary>
      <param name="indexes">An array of indexes.</param>
      <returns>The linear index corresponding to <paramref name="indexes" />.</returns>
      <remarks>
        <para>This method multiplies the indexes by the corresponding
            strides and returns the sum without any range checks.</para>
      </remarks>
    </member>
    <member name="T:Numerics.NET.Tensors.TensorShape">
      <summary>
            Represents the shape (dimensions) of a tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.#ctor(System.Int32[])">
      <summary>
            Constructs a new tensor shape with the specified dimensions.
            </summary>
      <param name="dimensions">An array of dimensions.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Append(System.Int32)">
      <summary>
            Adds a dimension of the specified size to the end of the current shape.
            </summary>
      <param name="size">The size of the added dimension.</param>
      <returns>A new tensor shape with a dimension of size <paramref name="size" />
            added at the end.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.AsSpan">
      <summary>
            Returns the dimensions of the tensor shape as a readonly
            span of integers.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Broadcast(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape)">
      <summary>
            Returns the shape of the result of an elementwise operation
            when applied, with broadcasting, to operands with the specified
            shapes.
            </summary>
      <param name="shape1">The shape of the first operand.</param>
      <param name="shape2">The shape of the second operand.</param>
      <returns>A new shape with unit dimensions in <paramref name="shape1" /> 
            and <paramref name="shape2" /> expanded to the corresponding
            dimension in the other shape.</returns>
      <exception cref="T:Numerics.NET.DimensionMismatchException">The shapes are not compatible
            for broadcasting.</exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Broadcast(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape)">
      <summary>
            Returns the shape of the result of an elementwise operation
            when applied, with broadcasting, to operands with the specified
            shapes.
            </summary>
      <param name="shape1">The shape of the first operand.</param>
      <param name="shape2">The shape of the second operand.</param>
      <param name="shape3">The shape of the third operand.</param>
      <returns>A new shape with unit dimensions in <paramref name="shape1" /> 
            and <paramref name="shape2" /> expanded to the corresponding
            dimension in the other shape.</returns>
      <exception cref="T:Numerics.NET.DimensionMismatchException">The shapes are not compatible
            for broadcasting.</exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Broadcast(Numerics.NET.Tensors.TensorShape[])">
      <summary>
            Returns the shape of the result of an elementwise operation
            when applied, with broadcasting, to operands with the specified
            shapes.
            </summary>
      <param name="shapes">A parameter array of shapes.</param>
      <returns>A new shape with unit dimensions in any of the elements of
            <paramref name="shapes" /> expanded to the corresponding
            dimension in the other shape(s).</returns>
      <exception cref="T:Numerics.NET.DimensionMismatchException">The shapes are not compatible
            for broadcasting.</exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.CanBroadcastFrom(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Gets whether this shape can be broadcast into
            from another shape.
            </summary>
      <param name="source">The shape to broadcast from.</param>
      <returns>
        <see langword="true" /> if <paramref name="source" />
            can be broadcast into this shape; 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.CanBroadcastFrom(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape)">
      <summary>
            Gets whether this shape can be broadcast into
            another shape.
            </summary>
      <param name="source1">The first shape to broadcast from.</param>
      <param name="source2">The second shape to broadcast from.</param>
      <returns>
        <see langword="true" /> if <paramref name="source1" />
            and <paramref name="source2" /> can be jointly
            broadcast into this shape; 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.CanBroadcastTo(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Returns whether a shape is entirely contained within another shape.
            </summary>
      <param name="other">The shape to compare against.</param>
      <returns>
        <see langword="true" /> if all dimensions of this shape are either
            equal to the corresponding dimension of <paramref name="other" />, or equal to one;
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.ColumnVector(System.Int32)">
      <summary>
            Represents the shape of a column vector of the
            specified length.
            </summary>
      <param name="length">The desired length of the vector.</param>
      <returns>A 2D shape with <paramref name="length" />
            rows and 1 column.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.CreateFromArray(System.Array)">
      <summary>
            Returns the shape of an array.
            </summary>
      <param name="array">A <see cref="T:System.Array" />.</param>
      <returns>A <see cref="T:Numerics.NET.Tensors.TensorShape" /> that describes 
            the shape of <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="array" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorShape.Dimensions">
      <summary>
            Gets a span containing the dimensions of the shape.
            </summary>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorShape.ElementCount">
      <summary>
            Gets the total number of elements in the shape.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Equals(Numerics.NET.Tensors.TensorShape)">
      <summary>
            Compares this shape to another shape.
            </summary>
      <param name="other">The shape to compare this shape to.</param>
      <returns>
        <see langword="true" /> if this shape and 
            <paramref name="other" /> have the same rank and
            the same dimensions; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts a dimension of the specified size at the specified position in the current shape.
            </summary>
      <param name="size">The size of the added dimension.</param>
      <param name="position">The zero-based index of the new dimension.</param>
      <returns>A new tensor shape with a dimension of size <paramref name="size" />
            inserted at position <paramref name="position" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorShape.Item(System.Int32)">
      <summary>
            Gets the size of the specified dimension.
            </summary>
      <param name="axis">The zero-based index of the axis.</param>
      <returns>The dimension along the axis with index
            <paramref name="axis" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Equality(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape)">
      <summary>
            Compares two shapes for equality.
            </summary>
      <param name="left">The first shape to compare.</param>
      <param name="right">The second shape to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> have the same rank and
            the same dimensions; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.Int32)~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts a single integer to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimension">An integer that contains
            the length of the dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.Int32[])~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer array to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer array that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})~Numerics.NET.Tensors.TensorShape">
      <summary>
            Implicitly converts an integer tuple to a
            <see cref="T:Numerics.NET.Tensors.TensorShape" />.
            </summary>
      <param name="dimensions">An integer tuple that contains
            the length of each dimension.</param>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.op_Inequality(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape)">
      <summary>
            Compares two shapes for inequality.
            </summary>
      <param name="left">The first shape to compare.</param>
      <param name="right">The second shape to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and 
            <paramref name="right" /> have a different rank or
            at least one dimension of a different size; 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Numerics.NET.Tensors.TensorShape.Rank">
      <summary>
            Gets the number of dimensions.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.RemoveAt(Numerics.NET.Axes)">
      <summary>
            Removes the specified dimensions from the current shape.
            </summary>
      <param name="axes">An axis collection that specifies the dimensions to remove.</param>
      <returns>A new tensor shape with the dimensions specified by <paramref name="axes" />
            removed.</returns>
      <remarks>
        <paramref name="axes" /> may contain negative axes values indicating
            that they should be counted from the end.</remarks>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.RemoveAt(System.Int32)">
      <summary>
            Returns a new tensor shape with the specified axis
            removed.
            </summary>
      <param name="axis">The axis to remove.</param>
      <returns>A new tensor shape that has the axis with index
            <paramref name="axis" /> removed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="axis" /> is less than zero or greather
            than or equal to the rank of the tensor shape.</para>
      </exception>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.RowVector(System.Int32)">
      <summary>
            Represents the shape of a row vector of the
            specified length.
            </summary>
      <param name="length">The desired length of the vector.</param>
      <returns>A 2D shape with 1 row and <paramref name="length" />
            columns.</returns>
    </member>
    <member name="F:Numerics.NET.Tensors.TensorShape.Scalar">
      <summary>
            Represents the shape of a scalar, 
            a 0-dimensional tensor.
            </summary>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.SwapAxes(System.Int32,System.Int32)">
      <summary>
            Returns a new tensor shape that has the dimensions along the specified
            axes swapped.
            </summary>
      <param name="axis1">The first axis.</param>
      <param name="axis2">The second axis.</param>
      <returns>A tensor shape with the same dimensions, except along the axes
            <paramref name="axis1" /> and <paramref name="axis2" />, 
            which are swapped.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.TryBroadcast(Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape,Numerics.NET.Tensors.TensorShape@)">
      <summary>
            Attempts to compute the shape of the result of an elementwise operation
            when applied, with broadcasting, to operands with the specified
            shapes.
            </summary>
      <param name="shape1">The shape of the first operand.</param>
      <param name="shape2">The shape of the second operand.</param>
      <param name="result">On return, the broadcast shape.</param>
      <returns>
        <see langword="true" /> if the shapes are compatible
            and the broadcast shape was computed; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.Vector(System.Int32)">
      <summary>
            Represents the shape of a vector of the
            specified length.
            </summary>
      <param name="length">The desired length of the vector.</param>
      <returns>A 1D shape with 1 row and <paramref name="length" />
            columns.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.WithDimension(Numerics.NET.Axes,System.Int32)">
      <summary>
            Replaces the specified dimensions with the specified size.
            </summary>
      <param name="axes"></param>
      <param name="size"></param>
      <returns>A new tensor shape with the dimensions specified by <paramref name="axes" />
            replaced with <paramref name="size" />.</returns>
    </member>
    <member name="M:Numerics.NET.Tensors.TensorShape.WithDimension(System.Int32,System.Int32)">
      <summary>
            Returns a tensor shape that has one dimension
            changed from this shape.
            </summary>
      <param name="axis">The axis whose dimension is different.</param>
      <param name="length">The new dimension along the axis.</param>
      <returns>A tensor shape with the same dimensions as this
            shape, except along the axis with index <paramref name="axis" />
            which has size <paramref name="length" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="axis" /> is less than zero or greather
            than or equal to the rank of the tensor shape.</para>
      </exception>
    </member>
  </members>
</doc>